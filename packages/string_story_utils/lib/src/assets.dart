// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: constant_identifier_names, non_constant_identifier_names
import 'dart:convert';

class Assets {
  static const String _assets_string_key_mustache =
      'Ly8gaWdub3JlX2Zvcl9maWxlOiBkZXBlbmRfb25fcmVmZXJlbmNlZF9wYWNrYWdlcwoKaW1wb3J0ICdwYWNrYWdlOmNvbGxlY3Rpb24vY29sbGVjdGlvbi5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOnN0cmluZ19zdG9yeS9zdHJpbmdfc3RvcnkuZGFydCc7CgplbnVtIFN0cmluZ0tleSB7Cnt7IyBpdGVtcyB9fSAge3tuYW1lfX0oJ3t7dmFsdWV9fScpe3t0ZXJtaW5hdG9yfX0Ke3svIGl0ZW1zIH19CgogIGZpbmFsIFN0cmluZyBrZXk7CgogIGNvbnN0IFN0cmluZ0tleSh0aGlzLmtleSk7Cn0KCmV4dGVuc2lvbiBTdHJpbmdLZXlFeHQgb24gU3RyaW5nS2V5IHsKICBzdGF0aWMgU3RyaW5nS2V5PyBmcm9tU3RyaW5nKFN0cmluZyB2YWx1ZSkgewogICAgZmluYWwga2V5ID0gdmFsdWUuc3BsaXQoIi4iKS5maXJzdDsKCiAgICBmaW5hbCBzaW1wbGVLZXkgPSBTdHJpbmdLZXkudmFsdWVzLmZpcnN0V2hlcmVPck51bGwoKGl0KSA9PiBpdC5rZXkgPT0ga2V5KTsKCiAgICBpZiAoc2ltcGxlS2V5ICE9IG51bGwpIHsKICAgICAgcmV0dXJuIHNpbXBsZUtleTsKICAgIH0KCiAgICBmaW5hbCBjb21wbGV4S2V5ID0gU3RyaW5nS2V5LnZhbHVlcy5maXJzdFdoZXJlT3JOdWxsKChpdCkgewogICAgICByZXR1cm4gaXQua2V5LnJlbW92ZVByZWZpeChrZXkpLnN0YXJ0c1dpdGgoIigiKTsKICAgIH0pOwoKICAgIHJldHVybiBjb21wbGV4S2V5OwogIH0KfQ==';
  static String get assets_string_key_mustache =>
      _decode(_assets_string_key_mustache);
  static const String _assets_string_story_core_mustache =
      'Ly8gaWdub3JlX2Zvcl9maWxlOiBkZXBlbmRfb25fcmVmZXJlbmNlZF9wYWNrYWdlcwoKaW1wb3J0ICdwYWNrYWdlOmVxdWF0YWJsZS9lcXVhdGFibGUuZGFydCc7CmltcG9ydCAncGFja2FnZTpmbHV0dGVyL21hdGVyaWFsLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlcl9ibG9jL2ZsdXR0ZXJfYmxvYy5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXJfaG9va3MvZmx1dHRlcl9ob29rcy5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXJfbG9jYWxpemF0aW9ucy9mbHV0dGVyX2xvY2FsaXphdGlvbnMuZGFydCc7CmltcG9ydCAncGFja2FnZTp7e3BhY2thZ2VOYW1lfX0ve3t7c3RyaW5nU3Rvcnl9fX0vc3RyaW5nX3N0b3J5LmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6e3twYWNrYWdlTmFtZX19L3t7e2kxOG59fX0vc3RyaW5ncy5nLmRhcnQnOwoKY2xhc3MgU3RyaW5nU3RvcnlTZWxlY3Rpb24gZXh0ZW5kcyBFcXVhdGFibGUgewogIGNvbnN0IFN0cmluZ1N0b3J5U2VsZWN0aW9uKHsKICAgIHJlcXVpcmVkIHRoaXMua2V5LAogIH0pOwoKICBmaW5hbCBTdHJpbmdLZXk/IGtleTsKCiAgQG92ZXJyaWRlCiAgTGlzdDxPYmplY3Q/PiBnZXQgcHJvcHMgPT4gWwogICAgICAgIGtleSwKICAgICAgXTsKCiAgc3RhdGljIFN0cmluZ1N0b3J5U2VsZWN0aW9uPyBtYXliZU9mKEJ1aWxkQ29udGV4dCBjb250ZXh0KSA9PgogICAgICBjb250ZXh0LnJlYWQ8U3RyaW5nU3RvcnlTZWxlY3Rpb24/PigpOwp9CgpjbGFzcyBTdHJpbmdTdG9yeSBleHRlbmRzIEVxdWF0YWJsZSB7CiAgY29uc3QgU3RyaW5nU3RvcnkoewogICAgcmVxdWlyZWQgdGhpcy5rZXlzLAogICAgcmVxdWlyZWQgdGhpcy50aXRsZSwKICAgIHJlcXVpcmVkIHRoaXMuYnVpbGRlciwKICB9KTsKCiAgZmluYWwgTGlzdDxTdHJpbmdLZXk+IGtleXM7CiAgZmluYWwgU3RyaW5nIHRpdGxlOwogIGZpbmFsIFdpZGdldEJ1aWxkZXIgYnVpbGRlcjsKCiAgQG92ZXJyaWRlCiAgTGlzdDxPYmplY3Q/PiBnZXQgcHJvcHMgPT4gW2tleXMsIHRpdGxlXTsKfQoKY2xhc3MgU3RyaW5nU3RvcnlBcHAgZXh0ZW5kcyBTdGF0ZWxlc3NXaWRnZXQgewogIGNvbnN0IFN0cmluZ1N0b3J5QXBwKHsKICAgIHN1cGVyLmtleSwKICAgIHJlcXVpcmVkIHRoaXMuYnVpbGRlciwKICAgIHRoaXMubmF2aWdhdG9yS2V5LAogICAgdGhpcy5saWdodFRoZW1lLAogICAgdGhpcy5kYXJrVGhlbWUsCiAgICB0aGlzLnRoZW1lTW9kZSwKICB9KTsKCiAgZmluYWwgV2lkZ2V0QnVpbGRlciBidWlsZGVyOwogIGZpbmFsIEdsb2JhbEtleTxOYXZpZ2F0b3JTdGF0ZT4/IG5hdmlnYXRvcktleTsKICBmaW5hbCBUaGVtZURhdGE/IGxpZ2h0VGhlbWU7CiAgZmluYWwgVGhlbWVEYXRhPyBkYXJrVGhlbWU7CiAgZmluYWwgVGhlbWVNb2RlPyB0aGVtZU1vZGU7CgogIEBvdmVycmlkZQogIFdpZGdldCBidWlsZChCdWlsZENvbnRleHQgY29udGV4dCkgewogICAgZmluYWwgbG9jYWxpemF0aW9uc0RlbGVnYXRlcyA9IFsKICAgICAgR2xvYmFsTWF0ZXJpYWxMb2NhbGl6YXRpb25zLmRlbGVnYXRlLAogICAgICBHbG9iYWxXaWRnZXRzTG9jYWxpemF0aW9ucy5kZWxlZ2F0ZSwKICAgICAgR2xvYmFsQ3VwZXJ0aW5vTG9jYWxpemF0aW9ucy5kZWxlZ2F0ZSwKICAgICAgX1N0cmluZ1N0b3J5RGVsZWdhdGUoY29udGV4dC5zdHJpbmdzKSwKICAgIF07CgogICAgcmV0dXJuIE1hdGVyaWFsQXBwKAogICAgICBuYXZpZ2F0b3JLZXk6IG5hdmlnYXRvcktleSwKICAgICAgdGhlbWU6IGxpZ2h0VGhlbWUgPz8gVGhlbWUub2YoY29udGV4dCksCiAgICAgIGRhcmtUaGVtZTogZGFya1RoZW1lLAogICAgICB0aGVtZU1vZGU6IHRoZW1lTW9kZSwKICAgICAgZGVidWdTaG93Q2hlY2tlZE1vZGVCYW5uZXI6IGZhbHNlLAogICAgICBsb2NhbGl6YXRpb25zRGVsZWdhdGVzOiBsb2NhbGl6YXRpb25zRGVsZWdhdGVzLAogICAgICBzdXBwb3J0ZWRMb2NhbGVzOiBBcHBMb2NhbGVVdGlscy5zdXBwb3J0ZWRMb2NhbGVzLAogICAgICBob21lOiBCdWlsZGVyKAogICAgICAgIGJ1aWxkZXI6IGJ1aWxkZXIsCiAgICAgICksCiAgICApOwogIH0KfQoKY2xhc3MgU3RyaW5nU3RvcnlBdXRvT3BlbiBleHRlbmRzIFN0YXRlbGVzc1dpZGdldCB7CiAgY29uc3QgU3RyaW5nU3RvcnlBdXRvT3Blbih7CiAgICBzdXBlci5rZXksCiAgICByZXF1aXJlZCB0aGlzLm9uT3BlbiwKICAgIHRoaXMubmF2aWdhdG9yS2V5LAogIH0pOwoKICBmaW5hbCB2b2lkIEZ1bmN0aW9uKEJ1aWxkQ29udGV4dCBjb250ZXh0KSBvbk9wZW47CiAgZmluYWwgR2xvYmFsS2V5PE5hdmlnYXRvclN0YXRlPj8gbmF2aWdhdG9yS2V5OwoKICBAb3ZlcnJpZGUKICBXaWRnZXQgYnVpbGQoQnVpbGRDb250ZXh0IF8pIHsKICAgIHJldHVybiBTdHJpbmdTdG9yeUFwcCgKICAgICAgbmF2aWdhdG9yS2V5OiBuYXZpZ2F0b3JLZXksCiAgICAgIGJ1aWxkZXI6IChfKSB7CiAgICAgICAgcmV0dXJuIFNjYWZmb2xkKAogICAgICAgICAgYm9keTogU2FmZUFyZWEoCiAgICAgICAgICAgIGNoaWxkOiBIb29rQnVpbGRlcigKICAgICAgICAgICAgICBidWlsZGVyOiAoY29udGV4dCkgewogICAgICAgICAgICAgICAgZmluYWwgZGlkT3BlbiA9IHVzZVJlZihmYWxzZSk7CgogICAgICAgICAgICAgICAgdXNlRWZmZWN0KCgpIHsKICAgICAgICAgICAgICAgICAgV2lkZ2V0c0JpbmRpbmcuaW5zdGFuY2UuYWRkUG9zdEZyYW1lQ2FsbGJhY2soKF8pIHsKICAgICAgICAgICAgICAgICAgICBvbk9wZW4oY29udGV4dCk7CiAgICAgICAgICAgICAgICAgICAgZGlkT3Blbi52YWx1ZSA9IHRydWU7CiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICAgICAgICAgIH0sIFtdKTsKCiAgICAgICAgICAgICAgICByZXR1cm4gY29uc3QgU2l6ZWRCb3guc2hyaW5rKCk7CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgKSwKICAgICAgICAgICksCiAgICAgICAgKTsKICAgICAgfSwKICAgICk7CiAgfQp9CgpjbGFzcyBfU3RyaW5nU3RvcnlEZWxlZ2F0ZSBleHRlbmRzIExvY2FsaXphdGlvbnNEZWxlZ2F0ZTxUcmFuc2xhdGlvbnM+IHsKICBmaW5hbCBTIHN0cmluZ3M7CgogIF9TdHJpbmdTdG9yeURlbGVnYXRlKHRoaXMuc3RyaW5ncyk7CgogIEBvdmVycmlkZQogIGJvb2wgaXNTdXBwb3J0ZWQoTG9jYWxlIGxvY2FsZSkgPT4gdHJ1ZTsKCiAgQG92ZXJyaWRlCiAgRnV0dXJlPFRyYW5zbGF0aW9ucz4gbG9hZChMb2NhbGUgbG9jYWxlKSBhc3luYyA9PiBzdHJpbmdzOwoKICBAb3ZlcnJpZGUKICBib29sIHNob3VsZFJlbG9hZChjb3ZhcmlhbnQgTG9jYWxpemF0aW9uc0RlbGVnYXRlPFRyYW5zbGF0aW9ucz4gb2xkKSA9PgogICAgICBvbGQgIT0gdGhpczsKfQo=';
  static String get assets_string_story_core_mustache =>
      _decode(_assets_string_story_core_mustache);
  static const String _assets_string_story_screen_mustache =
      '';
  static String get assets_string_story_screen_mustache =>
      _decode(_assets_string_story_screen_mustache);
  static const String _assets_strings_extension_mustache =
      'aW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvd2lkZ2V0cy5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOnt7cGFja2FnZU5hbWV9fS97e3tpMThufX19L3N0cmluZ3MuZy5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOnN5bmNocm9uaXplZC9zeW5jaHJvbml6ZWQuZGFydCc7CmltcG9ydCAncGFja2FnZTppbnRsL2RhdGVfc3ltYm9sX2RhdGFfbG9jYWwuZGFydCc7CmltcG9ydCAncGFja2FnZTpjb2xsZWN0aW9uL2NvbGxlY3Rpb24uZGFydCc7Cgp0eXBlZGVmIFMgPSBUcmFuc2xhdGlvbnM7CgpleHRlbnNpb24gU3RyaW5nc0V4dGVuc2lvbiBvbiBCdWlsZENvbnRleHQgewogIFMgZ2V0IHN0cmluZ3MgPT4gTG9jYWxpemF0aW9ucy5vZjxUcmFuc2xhdGlvbnM+KHRoaXMsIFRyYW5zbGF0aW9ucykhOwp9CgpjbGFzcyBTbGFuZ0RlbGVnYXRlIGV4dGVuZHMgTG9jYWxpemF0aW9uc0RlbGVnYXRlPFRyYW5zbGF0aW9ucz4gewogIFNsYW5nRGVsZWdhdGUoe3RoaXMub3ZlcnJpZGVUcmFuc2xhdGlvbn0pOwoKICBzdGF0aWMgZmluYWwgZGVsZWdhdGUgPSBTbGFuZ0RlbGVnYXRlKCk7CgogIGZpbmFsIF9sb2FkZWRUcmFuc2xhdGlvbnMgPSA8TG9jYWxlLCBUcmFuc2xhdGlvbnM+e307CiAgZmluYWwgX2xvYWRMb2NrID0gTG9jaygpOwogIHZhciBfaW5pdGlhbGl6ZURhdGVGb3JtYXR0aW5nQ2FsbGVkQXRMZWFzdE9uY2UgPSBmYWxzZTsKICBmaW5hbCBUcmFuc2xhdGlvbnM/IG92ZXJyaWRlVHJhbnNsYXRpb247CgogIEBvdmVycmlkZQogIEZ1dHVyZTxUcmFuc2xhdGlvbnM+IGxvYWQoTG9jYWxlIGxvY2FsZSkgYXN5bmMgewogICAgaWYgKG92ZXJyaWRlVHJhbnNsYXRpb24gIT0gbnVsbCkgewogICAgICByZXR1cm4gb3ZlcnJpZGVUcmFuc2xhdGlvbiE7CiAgICB9CgogICAgaWYgKF9sb2FkZWRUcmFuc2xhdGlvbnNbbG9jYWxlXSBjYXNlIGZpbmFsIFRyYW5zbGF0aW9ucyB2YWx1ZSkgewogICAgICByZXR1cm4gdmFsdWU7CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gX2xvYWRMb2NrLnN5bmNocm9uaXplZCgoKSBhc3luYyB7CiAgICAgICAgaWYgKCFfaW5pdGlhbGl6ZURhdGVGb3JtYXR0aW5nQ2FsbGVkQXRMZWFzdE9uY2UpIHsKICAgICAgICAgIGF3YWl0IGluaXRpYWxpemVEYXRlRm9ybWF0dGluZygpOwogICAgICAgICAgX2luaXRpYWxpemVEYXRlRm9ybWF0dGluZ0NhbGxlZEF0TGVhc3RPbmNlID0gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgaWYgKF9sb2FkZWRUcmFuc2xhdGlvbnNbbG9jYWxlXSAhPSBudWxsKSB7CiAgICAgICAgICByZXR1cm4gX2xvYWRlZFRyYW5zbGF0aW9uc1tsb2NhbGVdITsKICAgICAgICB9CgogICAgICAgIGZpbmFsIHRyYW5zbGF0aW9ucyA9IGF3YWl0IGxvY2FsZS5hc0FwcExvY2FsZSgpLmJ1aWxkKCk7CiAgICAgICAgX2xvYWRlZFRyYW5zbGF0aW9uc1tsb2NhbGVdID0gdHJhbnNsYXRpb25zOwogICAgICAgIHJldHVybiB0cmFuc2xhdGlvbnM7CiAgICAgIH0pOwogICAgfQogIH0KCiAgc3RhdGljIFRyYW5zbGF0aW9ucyBsb2FkU3luYyhMb2NhbGUgbG9jYWxlKSB7CiAgICByZXR1cm4gZGVsZWdhdGUuX2xvYWRlZFRyYW5zbGF0aW9uc1tsb2NhbGVdITsKICB9CgogIHN0YXRpYyBmaW5hbCBMaXN0PFN0cmluZz4gX3N1cHBvcnRlZExhbmd1YWdlQ29kZXMgPQogICAgICBBcHBMb2NhbGVVdGlscy5zdXBwb3J0ZWRMb2NhbGVzLm1hcCgoaXQpID0+IGl0Lmxhbmd1YWdlQ29kZSkudG9MaXN0KCk7CgogIEBvdmVycmlkZQogIGJvb2wgaXNTdXBwb3J0ZWQoTG9jYWxlIGxvY2FsZSkgPT4KICAgICAgX3N1cHBvcnRlZExhbmd1YWdlQ29kZXMuY29udGFpbnMobG9jYWxlLmxhbmd1YWdlQ29kZSk7CgogIEBvdmVycmlkZQogIGJvb2wgc2hvdWxkUmVsb2FkKFNsYW5nRGVsZWdhdGUgb2xkKSA9PiBvbGQgIT0gdGhpczsKfQoKZXh0ZW5zaW9uIEFwcExvY2FsZUV4dCBvbiBMb2NhbGUgewogIEFwcExvY2FsZSBhc0FwcExvY2FsZSgpIHsKICAgIGZpbmFsIGxvY2FsZSA9IHRoaXM7CiAgICBmaW5hbCBhcHBMb2NhbGUgPSBBcHBMb2NhbGUudmFsdWVzLmZpcnN0V2hlcmVPck51bGwoKGl0KSA9PgogICAgICAgICAgICBpdC5sYW5ndWFnZUNvZGUgPT0gbG9jYWxlLmxhbmd1YWdlQ29kZSAmJgogICAgICAgICAgICBpdC5jb3VudHJ5Q29kZSA9PSBsb2NhbGUuY291bnRyeUNvZGUgJiYKICAgICAgICAgICAgaXQuc2NyaXB0Q29kZSA9PSBsb2NhbGUuc2NyaXB0Q29kZSkgPz8KICAgICAgICBBcHBMb2NhbGUudmFsdWVzLmZpcnN0V2hlcmVPck51bGwoKGl0KSA9PgogICAgICAgICAgICBpdC5sYW5ndWFnZUNvZGUgPT0gbG9jYWxlLmxhbmd1YWdlQ29kZSAmJgogICAgICAgICAgICBpdC5jb3VudHJ5Q29kZSA9PSBsb2NhbGUuY291bnRyeUNvZGUpID8/CiAgICAgICAgQXBwTG9jYWxlLnZhbHVlcwogICAgICAgICAgICAuZmlyc3RXaGVyZU9yTnVsbCgoaXQpID0+IGl0Lmxhbmd1YWdlQ29kZSA9PSBsb2NhbGUubGFuZ3VhZ2VDb2RlKTsKICAgIGlmIChhcHBMb2NhbGUgPT0gbnVsbCkgewogICAgICB0aHJvdyBTdGF0ZUVycm9yKCJEaWRuJ3QgZmluZCBBcHBMb2NhbGUgZm9yIExvY2FsZSgkbG9jYWxlKSIpOwogICAgfQogICAgcmV0dXJuIGFwcExvY2FsZTsKICB9Cn0K';
  static String get assets_strings_extension_mustache =>
      _decode(_assets_strings_extension_mustache);
  static const String _assets_translation_scope_mustache =
      'Ly8gaWdub3JlX2Zvcl9maWxlOiBkZXBlbmRfb25fcmVmZXJlbmNlZF9wYWNrYWdlcwoKaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvbWF0ZXJpYWwuZGFydCc7CmltcG9ydCAncGFja2FnZTpmbHV0dGVyX2hvb2tzL2ZsdXR0ZXJfaG9va3MuZGFydCc7CmltcG9ydCAncGFja2FnZTp7e3BhY2thZ2VOYW1lfX0ve3t7aTE4bn19fS9zdHJpbmdzLmcuZGFydCc7CmltcG9ydCAncGFja2FnZTp7e3BhY2thZ2VOYW1lfX0ve3t7c3RyaW5nU3Rvcnl9fX0vc3RyaW5nX3N0b3J5LmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6c2xhbmcvZ2VuZXJhdGVkLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6cHJvdmlkZXIvcHJvdmlkZXIuZGFydCc7CgpjbGFzcyBUcmFuc2xhdGlvblNjb3BlS2V5cyB7CiAgVHJhbnNsYXRpb25TY29wZUtleXMoe3RoaXMub25BZGR9KTsKCiAgZmluYWwgdm9pZCBGdW5jdGlvbihTdHJpbmcpPyBvbkFkZDsKICBmaW5hbCBfcGF0aHMgPSA8U3RyaW5nPnt9OwoKICB2b2lkIGFkZChTdHJpbmcga2V5KSB7CiAgICBfcGF0aHMuYWRkKGtleSk7CiAgICBvbkFkZD8uY2FsbChrZXkpOwogIH0KCiAgU2V0PFN0cmluZz4gZ2V0IHZhbHVlID0+IFNldDxTdHJpbmc+Lm9mKF9wYXRocyk7CgogIHN0YXRpYyBUcmFuc2xhdGlvblNjb3BlS2V5cz8gb2YoQnVpbGRDb250ZXh0IGNvbnRleHQpID0+CiAgICAgIGNvbnRleHQucmVhZDxUcmFuc2xhdGlvblNjb3BlS2V5cz8+KCk7Cn0KCmNsYXNzIFRyYW5zbGF0aW9uU2NvcGUgZXh0ZW5kcyBIb29rV2lkZ2V0IHsKICBjb25zdCBUcmFuc2xhdGlvblNjb3BlKHsKICAgIHN1cGVyLmtleSwKICAgIHRoaXMuaXNFbmFibGVkID0gdHJ1ZSwKICAgIHJlcXVpcmVkIHRoaXMuY2hpbGQsCiAgICB0aGlzLnNjb3BlS2V5cywKICAgIHRoaXMuZGVidWdMYWJlbCwKICB9KTsKCiAgZmluYWwgYm9vbCBpc0VuYWJsZWQ7CiAgZmluYWwgV2lkZ2V0IGNoaWxkOwogIGZpbmFsIFRyYW5zbGF0aW9uU2NvcGVLZXlzPyBzY29wZUtleXM7CiAgZmluYWwgU3RyaW5nPyBkZWJ1Z0xhYmVsOwoKICBAb3ZlcnJpZGUKICBXaWRnZXQgYnVpbGQoQnVpbGRDb250ZXh0IGNvbnRleHQpIHsKICAgIGlmICghaXNFbmFibGVkKSB7CiAgICAgIHJldHVybiBjaGlsZDsKICAgIH0KCiAgICBmaW5hbCB0cmFuc2xhdGlvbnMgPSBjb250ZXh0LnN0cmluZ3M7CiAgICBmaW5hbCBtZXRhID0gdHJhbnNsYXRpb25zLiRtZXRhOwogICAgZmluYWwgZWZmZWN0aXZlU2NvcGVLZXlzID0gc2NvcGVLZXlzID8/IFRyYW5zbGF0aW9uU2NvcGVLZXlzKCk7CgogICAgZmluYWwgbWV0YVNweSA9IFNweVRyYW5zbGF0aW9uTWV0YWRhdGEoCiAgICAgIGRlYnVnTGFiZWw6IGRlYnVnTGFiZWwsCiAgICAgIGxvY2FsZTogbWV0YS5sb2NhbGUsCiAgICAgIG92ZXJyaWRlczogbWV0YS5vdmVycmlkZXMsCiAgICAgIGNhcmRpbmFsUmVzb2x2ZXI6IG1ldGEuY2FyZGluYWxSZXNvbHZlciwKICAgICAgb3JkaW5hbFJlc29sdmVyOiBtZXRhLm9yZGluYWxSZXNvbHZlciwKICAgICAgb25QYXRoQWNjZXNzZWQ6IChwYXRoKSB7CiAgICAgICAgZWZmZWN0aXZlU2NvcGVLZXlzLmFkZChwYXRoKTsKICAgICAgfSwKICAgICk7CgogICAgcmV0dXJuIExvY2FsaXphdGlvbnMub3ZlcnJpZGUoCiAgICAgIGNvbnRleHQ6IGNvbnRleHQsCiAgICAgIGRlbGVnYXRlczogWwogICAgICAgIFNsYW5nRGVsZWdhdGUoCiAgICAgICAgICBvdmVycmlkZVRyYW5zbGF0aW9uOiB0cmFuc2xhdGlvbnMuJGNvcHlXaXRoKG1ldGE6IG1ldGFTcHkpLAogICAgICAgICkKICAgICAgXSwKICAgICAgY2hpbGQ6IFByb3ZpZGVyLnZhbHVlKAogICAgICAgIHZhbHVlOiBlZmZlY3RpdmVTY29wZUtleXMsCiAgICAgICAgY2hpbGQ6IGNoaWxkLAogICAgICApLAogICAgKTsKICB9Cn0KCmNsYXNzIFNweVRyYW5zbGF0aW9uTWV0YWRhdGEKICAgIGV4dGVuZHMgVHJhbnNsYXRpb25NZXRhZGF0YTxBcHBMb2NhbGUsIFRyYW5zbGF0aW9ucz4gewogIFNweVRyYW5zbGF0aW9uTWV0YWRhdGEoewogICAgdGhpcy5kZWJ1Z0xhYmVsLAogICAgcmVxdWlyZWQgc3VwZXIubG9jYWxlLAogICAgcmVxdWlyZWQgc3VwZXIub3ZlcnJpZGVzLAogICAgcmVxdWlyZWQgc3VwZXIuY2FyZGluYWxSZXNvbHZlciwKICAgIHJlcXVpcmVkIHN1cGVyLm9yZGluYWxSZXNvbHZlciwKICAgIHJlcXVpcmVkIHRoaXMub25QYXRoQWNjZXNzZWQsCiAgfSk7CgogIGZpbmFsIFN0cmluZz8gZGVidWdMYWJlbDsKICBmaW5hbCB2b2lkIEZ1bmN0aW9uKFN0cmluZykgb25QYXRoQWNjZXNzZWQ7CgogIEBvdmVycmlkZQogIE5vZGU/IGdldE92ZXJyaWRlKFN0cmluZyBwYXRoKSB7CiAgICBvblBhdGhBY2Nlc3NlZChwYXRoKTsKICAgIHJldHVybiBzdXBlci5nZXRPdmVycmlkZShwYXRoKTsKICB9Cn0K';
  static String get assets_translation_scope_mustache =>
      _decode(_assets_translation_scope_mustache);
  static const String _assets_slang_base_state_ext_mustache =
      'aW1wb3J0ICdwYWNrYWdlOnt7cGFja2FnZU5hbWV9fS97e3tpMThufX19L3N0cmluZ3MuZy5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOnt7cGFja2FnZU5hbWV9fS97e3tzdHJpbmdTdG9yeX19fS9zdHJpbmdfc3RvcnkuZGFydCc7CmltcG9ydCAncGFja2FnZTpzdHJpbmdfc3Rvcnkvc3RyaW5nX3N0b3J5LmRhcnQnCiAgICBzaG93IFNsYW5nQmFzZVN0YXRlLCBTbGFuZ0Jhc2VTdGF0ZUlkbGUsIFNsYW5nQmFzZVN0YXRlRGF0YTsKCmV4dGVuc2lvbiBTbGFuZ0Jhc2VTdGF0ZUV4dCBvbiBTbGFuZ0Jhc2VTdGF0ZSB7CiAgU2xhbmdEZWxlZ2F0ZSBhc1NsYW5nRGVsZWdhdGUoKSB7CiAgICBmaW5hbCBzdGF0ZSA9IHRoaXM7CgogICAgcmV0dXJuIHN3aXRjaCAoc3RhdGUpIHsKICAgICAgU2xhbmdCYXNlU3RhdGVJZGxlKCkgPT4gU2xhbmdEZWxlZ2F0ZS5kZWxlZ2F0ZSwKICAgICAgU2xhbmdCYXNlU3RhdGVEYXRhKCkgPT4gU2xhbmdEZWxlZ2F0ZSgKICAgICAgICAgIG92ZXJyaWRlVHJhbnNsYXRpb246IEFwcExvY2FsZVV0aWxzLmJ1aWxkV2l0aE92ZXJyaWRlc0Zyb21NYXBTeW5jKAogICAgICAgICAgICBsb2NhbGU6IF9mcm9tTGFuZ3VhZ2VDb2RlKHN0YXRlLmxhbmd1YWdlQ29kZSksCiAgICAgICAgICAgIGlzRmxhdE1hcDogZmFsc2UsCiAgICAgICAgICAgIG1hcDogc3RhdGUuc2xhbmdKc29uLAogICAgICAgICAgKSwKICAgICAgICApLAogICAgfTsKICB9Cn0KCkFwcExvY2FsZSBfZnJvbUxhbmd1YWdlQ29kZShTdHJpbmcgY29kZSkgPT4KICAgIEFwcExvY2FsZS52YWx1ZXMuZmlyc3RXaGVyZSgoaXQpID0+IGl0Lmxhbmd1YWdlQ29kZSA9PSBjb2RlKTsK';
  static String get assets_slang_base_state_ext_mustache =>
      _decode(_assets_slang_base_state_ext_mustache);
  static const String _assets_string_story_generated_delegate_impl_mustache =
      'aW1wb3J0ICdkYXJ0OnVpJzsKCmltcG9ydCAncGFja2FnZTp7e3BhY2thZ2VOYW1lfX0ve3t7c3RyaW5nU3Rvcnl9fX0vc3RyaW5nX3N0b3J5LmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6c3RyaW5nX3N0b3J5L3N0cmluZ19zdG9yeS5kYXJ0JzsKCmNsYXNzIFN0cmluZ1N0b3J5R2VuZXJhdGVkRGVsZWdhdGVJbXBsIGV4dGVuZHMgU3RyaW5nU3RvcnlHZW5lcmF0ZWREZWxlZ2F0ZSB7CiAgQG92ZXJyaWRlCiAgRnV0dXJlPHZvaWQ+IHByZWxvYWQoTG9jYWxlIGxvY2FsZSkgYXN5bmMgewogICAgYXdhaXQgU2xhbmdEZWxlZ2F0ZS5kZWxlZ2F0ZS5sb2FkKGxvY2FsZSk7CiAgfQoKICBAb3ZlcnJpZGUKICB2b2lkIHZhbGlkYXRlU3RhdGVEYXRhKFNsYW5nQmFzZVN0YXRlRGF0YSBzdGF0ZSkgewogICAgc3RhdGUuYXNTbGFuZ0RlbGVnYXRlKCk7CiAgfQoKICBAb3ZlcnJpZGUKICBMaXN0PFN0cmluZz4gZ2V0IHBlcm1pdHRlZEtleXMgPT4KICAgICAgU3RyaW5nS2V5LnZhbHVlcy5tYXAoKGl0KSA9PiBpdC5rZXkpLnRvTGlzdCgpOwoKICBAb3ZlcnJpZGUKICBpbnQgZ2V0IHZlcnNpb25Db2RlID0+IHt7dmVyc2lvbkNvZGV9fTsKCiAgQG92ZXJyaWRlCiAgU3RyaW5nIGdldCBqc29uQXNzZXRzUGF0aCA9PiAie3t7anNvbkFzc2V0c1BhdGh9fX0iOwoKICBAb3ZlcnJpZGUKICBTdHJpbmcgZ2V0IGJhc2VMb2NhbGUgPT4gInt7YmFzZUxvY2FsZX19IjsKfQo=';
  static String get assets_string_story_generated_delegate_impl_mustache =>
      _decode(_assets_string_story_generated_delegate_impl_mustache);
  static const String _assets_locale_editor_widget_mustache =
      '';
  static String get assets_locale_editor_widget_mustache =>
      _decode(_assets_locale_editor_widget_mustache);
  static const String _assets_locale_editor_sheet_mustache =
      'Ly8gaWdub3JlX2Zvcl9maWxlOiBkZXBlbmRfb25fcmVmZXJlbmNlZF9wYWNrYWdlcwoKaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvbWF0ZXJpYWwuZGFydCc7CmltcG9ydCAncGFja2FnZTpmbHV0dGVyX2Jsb2MvZmx1dHRlcl9ibG9jLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6e3twYWNrYWdlTmFtZX19L3t7e3N0cmluZ1N0b3J5fX19L3N0cmluZ19zdG9yeS5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOnN0cmluZ19zdG9yeS9zdHJpbmdfc3RvcnkuZGFydCc7CmltcG9ydCAncGFja2FnZTp3b2x0X21vZGFsX3NoZWV0L3dvbHRfbW9kYWxfc2hlZXQuZGFydCc7CgpjbGFzcyBMb2NhbGVFZGl0b3JTaGVldCB7CiAgTG9jYWxlRWRpdG9yU2hlZXQuXygpOwoKICBzdGF0aWMgRnV0dXJlPHZvaWQ+IHNob3coQnVpbGRDb250ZXh0IGNvbnRleHQpIGFzeW5jIHsKICAgIGZpbmFsIGtleXNUb0Rpc3BsYXkgPSBUcmFuc2xhdGlvblNjb3BlS2V5cy5vZihjb250ZXh0KT8udmFsdWU7CiAgICBpZiAoa2V5c1RvRGlzcGxheSA9PSBudWxsKSB7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICBXb2x0TW9kYWxTaGVldC5zaG93KAogICAgICAgIGNvbnRleHQ6IGNvbnRleHQsCiAgICAgICAgcGFnZUxpc3RCdWlsZGVyOiAoXykgPT4gW19zaGVldCgpXSwKICAgICAgICBtb2RhbERlY29yYXRvcjogKGNoaWxkKSB7CiAgICAgICAgICByZXR1cm4gQmxvY1Byb3ZpZGVyKAogICAgICAgICAgICBjcmVhdGU6IChjb250ZXh0KSB7CiAgICAgICAgICAgICAgcmV0dXJuIFNsYW5nRWRpdG9yQ3ViaXQoCiAgICAgICAgICAgICAgICBiYXNlQ3ViaXQ6IGNvbnRleHQucmVhZDxTbGFuZ0Jhc2VDdWJpdD4oKSwKICAgICAgICAgICAgICAgIHNjb3BlZEtleXM6IGtleXNUb0Rpc3BsYXksCiAgICAgICAgICAgICAgICBvdkxvY2FsZToKICAgICAgICAgICAgICAgICAgICBTdHJpbmdTdG9yeVNlcnZpY2UuaW5zdGFuY2UuY29uZmlnLmFwcExhbmd1YWdlQ29kZSwKICAgICAgICAgICAgICApOwogICAgICAgICAgICB9LAogICAgICAgICAgICBjaGlsZDogY2hpbGQsCiAgICAgICAgICApOwogICAgICAgIH0pOwogIH0KCiAgc3RhdGljIE5vblNjcm9sbGluZ1dvbHRNb2RhbFNoZWV0UGFnZSBfc2hlZXQoKSB7CiAgICByZXR1cm4gTm9uU2Nyb2xsaW5nV29sdE1vZGFsU2hlZXRQYWdlKAogICAgICBjaGlsZDogUGFkZGluZygKICAgICAgICBwYWRkaW5nOiBjb25zdCBFZGdlSW5zZXRzLm9ubHkodG9wOiBEaW1lbnNpb25zRG91YmxlLm0pLAogICAgICAgIGNoaWxkOiBMb2NhbGVFZGl0b3JXaWRnZXQoCiAgICAgICAgICBzaG93U2NvcGVkVmFsdWVzOiB0cnVlLAogICAgICAgICAgaXNTZWFyY2hBdmFpbGFibGU6IGZhbHNlLAogICAgICAgICAgb25Kc29uUGF0aFNlbGVjdGVkOiAoXykge30sCiAgICAgICAgKSwKICAgICAgKSwKICAgICk7CiAgfQp9Cg==';
  static String get assets_locale_editor_sheet_mustache =>
      _decode(_assets_locale_editor_sheet_mustache);
  static const String _assets_locale_submit_sheet_mustache =
      '';
  static String get assets_locale_submit_sheet_mustache =>
      _decode(_assets_locale_submit_sheet_mustache);
  static const String _assets_generate_translations_prompt_mustache =
      'VHJhbnNsYXRlIHRoZSB0ZXh0IHNwZWNpZmllZCBhZnRlciAnLS0tJyBmcm9tIHRoZSB7e2Zyb219fSBsYW5ndWFnZSB0byB0aGUge3t0b319IGxhbmd1YWdlLgoKS2VlcCB0aGUgb3JpZ2luYWwgZm9ybWF0aW5nIChpbmNsdWRpbmcgbmV3bGluZXMpLCByZXR1cm4gdGhlIHRyYW5zbGF0ZWQgdGV4dCBvbmx5LgoKLS0tCnt7dGV4dH19';
  static String get assets_generate_translations_prompt_mustache =>
      _decode(_assets_generate_translations_prompt_mustache);
}

String _decode(String base64String) => utf8.decode(base64Decode(base64String));
