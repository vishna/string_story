// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: constant_identifier_names, non_constant_identifier_names
import 'dart:convert';

class Assets {
  static const String _assets_string_key_mustache =
      'Ly8gaWdub3JlX2Zvcl9maWxlOiBkZXBlbmRfb25fcmVmZXJlbmNlZF9wYWNrYWdlcwoKaW1wb3J0ICdwYWNrYWdlOmNvbGxlY3Rpb24vY29sbGVjdGlvbi5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOnN0cmluZ19zdG9yeS9zdHJpbmdfc3RvcnkuZGFydCc7CgplbnVtIFN0cmluZ0tleSB7Cnt7IyBpdGVtcyB9fSAge3tuYW1lfX0oJ3t7dmFsdWV9fScpe3t0ZXJtaW5hdG9yfX0Ke3svIGl0ZW1zIH19CgogIGZpbmFsIFN0cmluZyBrZXk7CgogIGNvbnN0IFN0cmluZ0tleSh0aGlzLmtleSk7Cn0KCmV4dGVuc2lvbiBTdHJpbmdLZXlFeHQgb24gU3RyaW5nS2V5IHsKICBzdGF0aWMgU3RyaW5nS2V5PyBmcm9tU3RyaW5nKFN0cmluZyB2YWx1ZSkgewogICAgZmluYWwga2V5ID0gdmFsdWUuc3BsaXQoIi4iKS5maXJzdDsKCiAgICBmaW5hbCBzaW1wbGVLZXkgPSBTdHJpbmdLZXkudmFsdWVzLmZpcnN0V2hlcmVPck51bGwoKGl0KSA9PiBpdC5rZXkgPT0ga2V5KTsKCiAgICBpZiAoc2ltcGxlS2V5ICE9IG51bGwpIHsKICAgICAgcmV0dXJuIHNpbXBsZUtleTsKICAgIH0KCiAgICBmaW5hbCBjb21wbGV4S2V5ID0gU3RyaW5nS2V5LnZhbHVlcy5maXJzdFdoZXJlT3JOdWxsKChpdCkgewogICAgICByZXR1cm4gaXQua2V5LnJlbW92ZVByZWZpeChrZXkpLnN0YXJ0c1dpdGgoIigiKTsKICAgIH0pOwoKICAgIHJldHVybiBjb21wbGV4S2V5OwogIH0KfQ==';
  static String get assets_string_key_mustache =>
      _decode(_assets_string_key_mustache);
  static const String _assets_string_story_core_mustache =
      'Ly8gaWdub3JlX2Zvcl9maWxlOiBkZXBlbmRfb25fcmVmZXJlbmNlZF9wYWNrYWdlcwoKaW1wb3J0ICdwYWNrYWdlOmVxdWF0YWJsZS9lcXVhdGFibGUuZGFydCc7CmltcG9ydCAncGFja2FnZTpmbHV0dGVyL21hdGVyaWFsLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlcl9ibG9jL2ZsdXR0ZXJfYmxvYy5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXJfaG9va3MvZmx1dHRlcl9ob29rcy5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXJfbG9jYWxpemF0aW9ucy9mbHV0dGVyX2xvY2FsaXphdGlvbnMuZGFydCc7CmltcG9ydCAncGFja2FnZTp7e3BhY2thZ2VOYW1lfX0ve3t7c3RyaW5nU3Rvcnl9fX0vc3RyaW5nX3N0b3J5LmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6e3twYWNrYWdlTmFtZX19L3t7e2kxOG59fX0vc3RyaW5ncy5nLmRhcnQnOwoKY2xhc3MgU3RyaW5nU3RvcnlTZWxlY3Rpb24gZXh0ZW5kcyBFcXVhdGFibGUgewogIGNvbnN0IFN0cmluZ1N0b3J5U2VsZWN0aW9uKHsKICAgIHJlcXVpcmVkIHRoaXMua2V5LAogIH0pOwoKICBmaW5hbCBTdHJpbmdLZXk/IGtleTsKCiAgQG92ZXJyaWRlCiAgTGlzdDxPYmplY3Q/PiBnZXQgcHJvcHMgPT4gWwogICAgICAgIGtleSwKICAgICAgXTsKCiAgc3RhdGljIFN0cmluZ1N0b3J5U2VsZWN0aW9uPyBtYXliZU9mKEJ1aWxkQ29udGV4dCBjb250ZXh0KSA9PgogICAgICBjb250ZXh0LnJlYWQ8U3RyaW5nU3RvcnlTZWxlY3Rpb24/PigpOwp9CgpjbGFzcyBTdHJpbmdTdG9yeSBleHRlbmRzIEVxdWF0YWJsZSB7CiAgY29uc3QgU3RyaW5nU3RvcnkoewogICAgcmVxdWlyZWQgdGhpcy5rZXlzLAogICAgcmVxdWlyZWQgdGhpcy50aXRsZSwKICAgIHJlcXVpcmVkIHRoaXMuYnVpbGRlciwKICB9KTsKCiAgZmluYWwgTGlzdDxTdHJpbmdLZXk+IGtleXM7CiAgZmluYWwgU3RyaW5nIHRpdGxlOwogIGZpbmFsIFdpZGdldEJ1aWxkZXIgYnVpbGRlcjsKCiAgQG92ZXJyaWRlCiAgTGlzdDxPYmplY3Q/PiBnZXQgcHJvcHMgPT4gW2tleXMsIHRpdGxlXTsKfQoKY2xhc3MgU3RyaW5nU3RvcnlBcHAgZXh0ZW5kcyBTdGF0ZWxlc3NXaWRnZXQgewogIGNvbnN0IFN0cmluZ1N0b3J5QXBwKHsKICAgIHN1cGVyLmtleSwKICAgIHJlcXVpcmVkIHRoaXMuYnVpbGRlciwKICAgIHRoaXMubmF2aWdhdG9yS2V5LAogICAgdGhpcy5saWdodFRoZW1lLAogICAgdGhpcy5kYXJrVGhlbWUsCiAgICB0aGlzLnRoZW1lTW9kZSwKICB9KTsKCiAgZmluYWwgV2lkZ2V0QnVpbGRlciBidWlsZGVyOwogIGZpbmFsIEdsb2JhbEtleTxOYXZpZ2F0b3JTdGF0ZT4/IG5hdmlnYXRvcktleTsKICBmaW5hbCBUaGVtZURhdGE/IGxpZ2h0VGhlbWU7CiAgZmluYWwgVGhlbWVEYXRhPyBkYXJrVGhlbWU7CiAgZmluYWwgVGhlbWVNb2RlPyB0aGVtZU1vZGU7CgogIEBvdmVycmlkZQogIFdpZGdldCBidWlsZChCdWlsZENvbnRleHQgY29udGV4dCkgewogICAgZmluYWwgbG9jYWxpemF0aW9uc0RlbGVnYXRlcyA9IFsKICAgICAgR2xvYmFsTWF0ZXJpYWxMb2NhbGl6YXRpb25zLmRlbGVnYXRlLAogICAgICBHbG9iYWxXaWRnZXRzTG9jYWxpemF0aW9ucy5kZWxlZ2F0ZSwKICAgICAgR2xvYmFsQ3VwZXJ0aW5vTG9jYWxpemF0aW9ucy5kZWxlZ2F0ZSwKICAgICAgX1N0cmluZ1N0b3J5RGVsZWdhdGUoY29udGV4dC5zdHJpbmdzKSwKICAgIF07CgogICAgcmV0dXJuIE1hdGVyaWFsQXBwKAogICAgICBuYXZpZ2F0b3JLZXk6IG5hdmlnYXRvcktleSwKICAgICAgdGhlbWU6IGxpZ2h0VGhlbWUgPz8gVGhlbWUub2YoY29udGV4dCksCiAgICAgIGRhcmtUaGVtZTogZGFya1RoZW1lLAogICAgICB0aGVtZU1vZGU6IHRoZW1lTW9kZSwKICAgICAgZGVidWdTaG93Q2hlY2tlZE1vZGVCYW5uZXI6IGZhbHNlLAogICAgICBsb2NhbGl6YXRpb25zRGVsZWdhdGVzOiBsb2NhbGl6YXRpb25zRGVsZWdhdGVzLAogICAgICBzdXBwb3J0ZWRMb2NhbGVzOiBBcHBMb2NhbGVVdGlscy5zdXBwb3J0ZWRMb2NhbGVzLAogICAgICBob21lOiBCdWlsZGVyKAogICAgICAgIGJ1aWxkZXI6IGJ1aWxkZXIsCiAgICAgICksCiAgICApOwogIH0KfQoKY2xhc3MgU3RyaW5nU3RvcnlBdXRvT3BlbiBleHRlbmRzIFN0YXRlbGVzc1dpZGdldCB7CiAgY29uc3QgU3RyaW5nU3RvcnlBdXRvT3Blbih7CiAgICBzdXBlci5rZXksCiAgICByZXF1aXJlZCB0aGlzLm9uT3BlbiwKICAgIHRoaXMubmF2aWdhdG9yS2V5LAogIH0pOwoKICBmaW5hbCB2b2lkIEZ1bmN0aW9uKEJ1aWxkQ29udGV4dCBjb250ZXh0KSBvbk9wZW47CiAgZmluYWwgR2xvYmFsS2V5PE5hdmlnYXRvclN0YXRlPj8gbmF2aWdhdG9yS2V5OwoKICBAb3ZlcnJpZGUKICBXaWRnZXQgYnVpbGQoQnVpbGRDb250ZXh0IF8pIHsKICAgIHJldHVybiBTdHJpbmdTdG9yeUFwcCgKICAgICAgbmF2aWdhdG9yS2V5OiBuYXZpZ2F0b3JLZXksCiAgICAgIGJ1aWxkZXI6IChfKSB7CiAgICAgICAgcmV0dXJuIFNjYWZmb2xkKAogICAgICAgICAgYm9keTogU2FmZUFyZWEoCiAgICAgICAgICAgIGNoaWxkOiBIb29rQnVpbGRlcigKICAgICAgICAgICAgICBidWlsZGVyOiAoY29udGV4dCkgewogICAgICAgICAgICAgICAgZmluYWwgZGlkT3BlbiA9IHVzZVJlZihmYWxzZSk7CgogICAgICAgICAgICAgICAgdXNlRWZmZWN0KCgpIHsKICAgICAgICAgICAgICAgICAgV2lkZ2V0c0JpbmRpbmcuaW5zdGFuY2UuYWRkUG9zdEZyYW1lQ2FsbGJhY2soKF8pIHsKICAgICAgICAgICAgICAgICAgICBvbk9wZW4oY29udGV4dCk7CiAgICAgICAgICAgICAgICAgICAgZGlkT3Blbi52YWx1ZSA9IHRydWU7CiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICAgICAgICAgIH0sIFtdKTsKCiAgICAgICAgICAgICAgICByZXR1cm4gY29uc3QgU2l6ZWRCb3guc2hyaW5rKCk7CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgKSwKICAgICAgICAgICksCiAgICAgICAgKTsKICAgICAgfSwKICAgICk7CiAgfQp9CgpjbGFzcyBfU3RyaW5nU3RvcnlEZWxlZ2F0ZSBleHRlbmRzIExvY2FsaXphdGlvbnNEZWxlZ2F0ZTxUcmFuc2xhdGlvbnM+IHsKICBmaW5hbCBTIHN0cmluZ3M7CgogIF9TdHJpbmdTdG9yeURlbGVnYXRlKHRoaXMuc3RyaW5ncyk7CgogIEBvdmVycmlkZQogIGJvb2wgaXNTdXBwb3J0ZWQoTG9jYWxlIGxvY2FsZSkgPT4gdHJ1ZTsKCiAgQG92ZXJyaWRlCiAgRnV0dXJlPFRyYW5zbGF0aW9ucz4gbG9hZChMb2NhbGUgbG9jYWxlKSBhc3luYyA9PiBzdHJpbmdzOwoKICBAb3ZlcnJpZGUKICBib29sIHNob3VsZFJlbG9hZChjb3ZhcmlhbnQgTG9jYWxpemF0aW9uc0RlbGVnYXRlPFRyYW5zbGF0aW9ucz4gb2xkKSA9PgogICAgICBvbGQgIT0gdGhpczsKfQo=';
  static String get assets_string_story_core_mustache =>
      _decode(_assets_string_story_core_mustache);
  static const String _assets_string_story_screen_mustache =
      'Ly8gaWdub3JlX2Zvcl9maWxlOiBkZXBlbmRfb25fcmVmZXJlbmNlZF9wYWNrYWdlcwoKaW1wb3J0ICdwYWNrYWdlOmNvbGxlY3Rpb24vY29sbGVjdGlvbi5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOmRldmljZV9mcmFtZS9kZXZpY2VfZnJhbWUuZGFydCc7CmltcG9ydCAncGFja2FnZTpmbHV0dGVyL21hdGVyaWFsLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlcl9ibG9jL2ZsdXR0ZXJfYmxvYy5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXJfaG9va3MvZmx1dHRlcl9ob29rcy5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOnt7cGFja2FnZU5hbWV9fS97e3tzdHJpbmdTdG9yeX19fS9zdHJpbmdfc3RvcnkuZGFydCc7CmltcG9ydCAncGFja2FnZTpwcm92aWRlci9wcm92aWRlci5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOnN0cmluZ19zdG9yeS9zdHJpbmdfc3RvcnkuZGFydCc7CgpjbGFzcyBTdHJpbmdTdG9yeVNjcmVlbiBleHRlbmRzIEhvb2tXaWRnZXQgewogIGNvbnN0IFN0cmluZ1N0b3J5U2NyZWVuKHsKICAgIHN1cGVyLmtleSwKICB9KTsKCiAgQG92ZXJyaWRlCiAgV2lkZ2V0IGJ1aWxkKEJ1aWxkQ29udGV4dCBjb250ZXh0KSB7CiAgICB1c2VFZmZlY3QoKCkgewogICAgICBTdHJpbmdTdG9yeVNlcnZpY2UuaW5zdGFuY2UuaW5BcHBFZGl0b3JDb25maWcub25FbnRlcj8uY2FsbCgpOwogICAgICByZXR1cm4gU3RyaW5nU3RvcnlTZXJ2aWNlLmluc3RhbmNlLmluQXBwRWRpdG9yQ29uZmlnLm9uRXhpdDsKICAgIH0sIFtdKTsKCiAgICByZXR1cm4gQmxvY1Byb3ZpZGVyKAogICAgICBjcmVhdGU6IChjb250ZXh0KSB7CiAgICAgICAgcmV0dXJuIFNsYW5nRWRpdG9yQ3ViaXQoCiAgICAgICAgICBiYXNlQ3ViaXQ6IGNvbnRleHQucmVhZDxTbGFuZ0Jhc2VDdWJpdD4oKSwKICAgICAgICAgIHNjb3BlZEtleXM6IHt9LAogICAgICAgICAgb3ZMb2NhbGU6IFN0cmluZ1N0b3J5U2VydmljZS5pbnN0YW5jZS5jb25maWcuYXBwTGFuZ3VhZ2VDb2RlLAogICAgICAgICk7CiAgICAgIH0sCiAgICAgIGNoaWxkOiBjb25zdCBfUGFuZXMoKSwKICAgICk7CiAgfQp9CgpjbGFzcyBfUGFuZXMgZXh0ZW5kcyBIb29rV2lkZ2V0IHsKICBjb25zdCBfUGFuZXMoKTsKCiAgQG92ZXJyaWRlCiAgV2lkZ2V0IGJ1aWxkKEJ1aWxkQ29udGV4dCBjb250ZXh0KSB7CiAgICBmaW5hbCBzaGFyZWQgPSB1c2VNZW1vaXplZCgoKSA9PiBfU2hhcmVkKGNvbnRleHQucmVhZCgpKSk7CiAgICB1c2VFZmZlY3QoKCkgewogICAgICByZXR1cm4gKCkgewogICAgICAgIHNoYXJlZC5kaXNwb3NlKCk7CiAgICAgIH07CiAgICB9LCBbc2hhcmVkXSk7CgogICAgZmluYWwgbG9nUGFuZUJ1aWxkZXIgPQogICAgICAgIFN0cmluZ1N0b3J5U2VydmljZS5pbnN0YW5jZS5pbkFwcEVkaXRvckNvbmZpZy5kZXZlbG9wZXJMb2dQYW5lQnVpbGRlcjsKCiAgICByZXR1cm4gUHJvdmlkZXIudmFsdWUoCiAgICAgIHZhbHVlOiBzaGFyZWQsCiAgICAgIGNoaWxkOiBIb29rQnVpbGRlcihidWlsZGVyOiAoY29udGV4dCkgewogICAgICAgIGZpbmFsIGlzUmVwb3J0aW5nID0gdXNlTGlzdGVuYWJsZShzaGFyZWQuaXNSZXBvcnRpbmcpLnZhbHVlOwogICAgICAgIGlmIChpc1JlcG9ydGluZykgewogICAgICAgICAgcmV0dXJuIFNjYWZmb2xkKAogICAgICAgICAgICBib2R5OiBSb3coCiAgICAgICAgICAgICAgY2hpbGRyZW46IFsKICAgICAgICAgICAgICAgIEZsZXhpYmxlKAogICAgICAgICAgICAgICAgICBjaGlsZDogX0NvbnRlbnQoCiAgICAgICAgICAgICAgICAgICAgaXNNb2JpbGU6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgIGtleTogc2hhcmVkLmNvbnRlbnRLZXksCiAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgRmxleGlibGUoCiAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IGxvZ1BhbmVCdWlsZGVyICE9IG51bGwKICAgICAgICAgICAgICAgICAgICAgICAgPyBCdWlsZGVyKGJ1aWxkZXI6IGxvZ1BhbmVCdWlsZGVyKQogICAgICAgICAgICAgICAgICAgICAgICA6IGNvbnN0IFBsYWNlaG9sZGVyKCkpCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgKSwKICAgICAgICAgICk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gU3RyaW5nU3RvcnlBZGFwdGl2ZUxheW91dCgKICAgICAgICAgIG1vYmlsZTogKF8pID0+IGNvbnN0IF9Nb2JpbGVDb250ZW50KCksCiAgICAgICAgICBkZXNrdG9wOiAoXykgPT4gU2NhZmZvbGQoCiAgICAgICAgICAgIGJvZHk6IFN0cmluZ1N0b3J5R29sZGVuUGFuZXMoCiAgICAgICAgICAgICAgICBmbGlwcGVkOiBmYWxzZSwKICAgICAgICAgICAgICAgIHNob3dEaXZpZGVyOiB0cnVlLAogICAgICAgICAgICAgICAgc21hbGxlclBhbmU6IF9LZXlzVHJlZSgKICAgICAgICAgICAgICAgICAga2V5OiBzaGFyZWQua2V5c1RyZWVLZXksCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgYmlnZ2VyUGFuZTogX0NvbnRlbnQoCiAgICAgICAgICAgICAgICAgIGlzTW9iaWxlOiBmYWxzZSwKICAgICAgICAgICAgICAgICAga2V5OiBzaGFyZWQuY29udGVudEtleSwKICAgICAgICAgICAgICAgICkpLAogICAgICAgICAgKSwKICAgICAgICApOwogICAgICB9KSwKICAgICk7CiAgfQp9CgpjbGFzcyBfS2V5c1RyZWUgZXh0ZW5kcyBIb29rV2lkZ2V0IHsKICBjb25zdCBfS2V5c1RyZWUoewogICAgcmVxdWlyZWQgc3VwZXIua2V5LAogICAgdGhpcy5zZWFyY2hGYWRlQ29sb3JzLAogIH0pOwoKICBmaW5hbCBMaXN0PENvbG9yPj8gc2VhcmNoRmFkZUNvbG9yczsKCiAgQG92ZXJyaWRlCiAgV2lkZ2V0IGJ1aWxkKEJ1aWxkQ29udGV4dCBjb250ZXh0KSB7CiAgICBmaW5hbCBzaGFyZWQgPSBjb250ZXh0LnJlYWQ8X1NoYXJlZD4oKTsKICAgIGZpbmFsIFZhbHVlTm90aWZpZXI8X1N0b3J5U3RhdGU/PiBzdGF0ZSA9IHNoYXJlZC5zdGF0ZTsKICAgIHVzZUxpc3RlbmFibGUoc3RhdGUpOwoKICAgIHJldHVybiBMb2NhbGVFZGl0b3JXaWRnZXQoCiAgICAgIGtleTogc2hhcmVkLmxvY2FsZUVkaXRvcktleSwKICAgICAgaXNTZWFyY2hBdmFpbGFibGU6IHRydWUsCiAgICAgIHNob3dTY29wZWRWYWx1ZXM6IGZhbHNlLAogICAgICBzZWFyY2hGYWRlQ29sb3JzOiBzZWFyY2hGYWRlQ29sb3JzLAogICAgICBvbkpzb25QYXRoU2VsZWN0ZWQ6ICh2YWx1ZSkgewogICAgICAgIGZpbmFsIHNlbGVjdGVkU3RyaW5nS2V5ID0gU3RyaW5nS2V5RXh0LmZyb21TdHJpbmcodmFsdWUpOwogICAgICAgIHNoYXJlZC5zZXRBY3RpdmVTdG9yeShrZXk6IHNlbGVjdGVkU3RyaW5nS2V5KTsKCiAgICAgICAgY29udGV4dAogICAgICAgICAgICAucmVhZDxTbGFuZ0Jhc2VDdWJpdD4oKQogICAgICAgICAgICAuc2V0TGFzdFNlbGVjdGVkS2V5KHNlbGVjdGVkU3RyaW5nS2V5Py5rZXkpOwogICAgICB9LAogICAgKTsKICB9Cn0KCmNsYXNzIF9Db250ZW50IGV4dGVuZHMgSG9va1dpZGdldCB7CiAgY29uc3QgX0NvbnRlbnQoewogICAgcmVxdWlyZWQgc3VwZXIua2V5LAogICAgcmVxdWlyZWQgdGhpcy5pc01vYmlsZSwKICB9KTsKCiAgZmluYWwgYm9vbCBpc01vYmlsZTsKCiAgQG92ZXJyaWRlCiAgV2lkZ2V0IGJ1aWxkKEJ1aWxkQ29udGV4dCBjb250ZXh0KSB7CiAgICBmaW5hbCBzaGFyZWQgPSBjb250ZXh0LnJlYWQ8X1NoYXJlZD4oKTsKCiAgICBmaW5hbCBzdGF0ZSA9IHVzZUxpc3RlbmFibGUoc2hhcmVkLnN0YXRlKS52YWx1ZTsKICAgIGZpbmFsIGlzUmVwb3J0aW5nID0gdXNlTGlzdGVuYWJsZShzaGFyZWQuaXNSZXBvcnRpbmcpLnZhbHVlOwoKICAgIGZpbmFsIHNob3dDb250cm9scyA9IChzdGF0ZT8uc2hvd0NvbnRyb2xzID8/IGZhbHNlKSAmJiAhaXNSZXBvcnRpbmc7CgogICAgZmluYWwgZ2xvYmFsS2V5ID0gdXNlTWVtb2l6ZWQoKCkgPT4gR2xvYmFsS2V5KCksIFsKICAgICAgc3RhdGU/LmVmZmVjdGl2ZVN0cmluZ1N0b3J5LAogICAgICBzdGF0ZT8uYWN0aXZlS2V5LAogICAgICBzdGF0ZT8ucmVmcmVzaENvdW50ZXIsCiAgICBdKTsKCiAgICB2b2lkIHByZXYoKSB7CiAgICAgIHNoYXJlZC5zdGF0ZS52YWx1ZSA9IHNoYXJlZC5zdGF0ZS52YWx1ZT8ucHJldigpOwogICAgfQoKICAgIHZvaWQgbmV4dCgpIHsKICAgICAgc2hhcmVkLnN0YXRlLnZhbHVlID0gc2hhcmVkLnN0YXRlLnZhbHVlPy5uZXh0KCk7CiAgICB9CgogICAgZmluYWwgZGlzYWJsZVByZXZpZXdGb2N1cyA9CiAgICAgICAgY29udGV4dC5zZWxlY3QoKFNsYW5nRWRpdG9yQ3ViaXQgYykgPT4gYy5zdGF0ZS5kaXNhYmxlUHJldmlld0ZvY3VzKTsKCiAgICByZXR1cm4gUHJvdmlkZXI8U3RyaW5nU3RvcnlTZWxlY3Rpb24+LnZhbHVlKAogICAgICB2YWx1ZTogU3RyaW5nU3RvcnlTZWxlY3Rpb24oa2V5OiBzdGF0ZT8uYWN0aXZlS2V5KSwKICAgICAgY2hpbGQ6IENvbHVtbigKICAgICAgICBjaGlsZHJlbjogWwogICAgICAgICAgaWYgKCFpc01vYmlsZSkgLi4uWwogICAgICAgICAgICBjb25zdCBfQXBwQmFyKCksCiAgICAgICAgICAgIFNWX1MsCiAgICAgICAgICBdLAogICAgICAgICAgQ2VudGVyKGNoaWxkOiBUZXh0KHNoYXJlZC5zdGF0ZS52YWx1ZT8uZWZmZWN0aXZlVGl0bGUgPz8gIiIpKSwKICAgICAgICAgIFNWX1hTLAogICAgICAgICAgRXhwYW5kZWQoCiAgICAgICAgICAgIGNoaWxkOiBEZXZpY2VGcmFtZSgKICAgICAgICAgICAgICBkZXZpY2U6IERldmljZXMuaW9zLmlQaG9uZTEzLAogICAgICAgICAgICAgIHNjcmVlbjogSW5rV2VsbCgKICAgICAgICAgICAgICAgIG9uVGFwOiBkaXNhYmxlUHJldmlld0ZvY3VzCiAgICAgICAgICAgICAgICAgICAgPyAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQucmVhZDxTbGFuZ0VkaXRvckN1Yml0PigpLmVuYWJsZUZvY3VzUHJldmlldygpOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIDogbnVsbCwKICAgICAgICAgICAgICAgIG9uTG9uZ1ByZXNzOiAoKSB7CiAgICAgICAgICAgICAgICAgIHNoYXJlZC5jdXJyZW50UmVwb3J0KCk7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgY2hpbGQ6IElnbm9yZUZvY3VzKAogICAgICAgICAgICAgICAgICBpZ25vcmluZzogZGlzYWJsZVByZXZpZXdGb2N1cywKICAgICAgICAgICAgICAgICAgY2hpbGQ6IElnbm9yZVBvaW50ZXIoCiAgICAgICAgICAgICAgICAgICAgaWdub3Jpbmc6IGRpc2FibGVQcmV2aWV3Rm9jdXMsCiAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IENvbG9yZWRCb3goCiAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogY29udGV4dC5jb2xvcnMuc3VyZmFjZSwKICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBUcmFuc2xhdGlvblNjb3BlKAogICAgICAgICAgICAgICAgICAgICAgICBrZXk6IFZhbHVlS2V5KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGU/LmVmZmVjdGl2ZVN0cmluZ1N0b3J5Py50aXRsZSA/PyAiTk8gU1RPUlkiKSwKICAgICAgICAgICAgICAgICAgICAgICAgZGVidWdMYWJlbDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlPy5lZmZlY3RpdmVTdHJpbmdTdG9yeT8udGl0bGUgPz8gIk5PIFNUT1JZIiwKICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGVLZXlzOiBzaGFyZWQuZ2V0U2NvcGVLZXlzQnlTdHJpbmdTdG9yeSgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlPy5lZmZlY3RpdmVTdHJpbmdTdG9yeSksCiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBCdWlsZGVyKAogICAgICAgICAgICAgICAgICAgICAgICAgIGtleTogZ2xvYmFsS2V5LAogICAgICAgICAgICAgICAgICAgICAgICAgIGJ1aWxkZXI6IHN0YXRlPy5lZmZlY3RpdmVTdHJpbmdTdG9yeT8uYnVpbGRlciA/PwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZW1wdHlQYXRoU3RhdGUsCiAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICksCiAgICAgICAgICAgICksCiAgICAgICAgICApLAogICAgICAgICAgUm93KAogICAgICAgICAgICBtYWluQXhpc0FsaWdubWVudDogTWFpbkF4aXNBbGlnbm1lbnQuY2VudGVyLAogICAgICAgICAgICBjaGlsZHJlbjogWwogICAgICAgICAgICAgIGlmIChzaG93Q29udHJvbHMpCiAgICAgICAgICAgICAgICBJY29uQnV0dG9uKAogICAgICAgICAgICAgICAgICAgIG9uUHJlc3NlZDogcHJldiwgaWNvbjogY29uc3QgSWNvbihJY29ucy5jaGV2cm9uX2xlZnQpKSwKICAgICAgICAgICAgICBTSF9YTCwKICAgICAgICAgICAgICBJY29uQnV0dG9uKAogICAgICAgICAgICAgICAgICBvblByZXNzZWQ6IHNoYXJlZC5yZWZyZXNoLCBpY29uOiBjb25zdCBJY29uKEljb25zLnJlZnJlc2gpKSwKICAgICAgICAgICAgICBTSF9YTCwKICAgICAgICAgICAgICBpZiAoc2hvd0NvbnRyb2xzKQogICAgICAgICAgICAgICAgSWNvbkJ1dHRvbigKICAgICAgICAgICAgICAgICAgICBvblByZXNzZWQ6IG5leHQsIGljb246IGNvbnN0IEljb24oSWNvbnMuY2hldnJvbl9yaWdodCkpLAogICAgICAgICAgICBdLAogICAgICAgICAgKSwKICAgICAgICAgIFNWX1MsCiAgICAgICAgXSwKICAgICAgKSwKICAgICk7CiAgfQp9CgpXaWRnZXQgX2VtcHR5UGF0aFN0YXRlKEJ1aWxkQ29udGV4dCBjb250ZXh0KSB7CiAgZmluYWwgc3RyaW5nU3RvcnlLZXkgPSBjb250ZXh0LnJlYWQ8U3RyaW5nU3RvcnlTZWxlY3Rpb24+KCkua2V5OwoKICBpZiAoc3RyaW5nU3RvcnlLZXkgPT0gbnVsbCkgewogICAgcmV0dXJuIENvbHVtbigKICAgICAgbWFpbkF4aXNBbGlnbm1lbnQ6IE1haW5BeGlzQWxpZ25tZW50LmNlbnRlciwKICAgICAgY3Jvc3NBeGlzQWxpZ25tZW50OiBDcm9zc0F4aXNBbGlnbm1lbnQuc3RyZXRjaCwKICAgICAgY2hpbGRyZW46IFsKICAgICAgICBQYWRkaW5nKAogICAgICAgICAgcGFkZGluZzogUF9NLAogICAgICAgICAgY2hpbGQ6IEhlbHBUcmFuc2xhdGVDYXJkKAogICAgICAgICAgICB0aXRsZTogc3RyaW5nU3RvcnlQYWNrYWdlU3RyaW5ncy5ob3d0b1RyYW5zbGF0ZVRpdGxlLAogICAgICAgICAgICBtZXNzYWdlOiBzdHJpbmdTdG9yeVBhY2thZ2VTdHJpbmdzLmhvd3RvVHJhbnNsYXRlTWVzc2FnZSwKICAgICAgICAgICksCiAgICAgICAgKQogICAgICBdLAogICAgKTsKICB9CgogIHJldHVybiBDZW50ZXIoCiAgICBjaGlsZDogU2hlZXRJbnB1dEhpbnQoCiAgICAgIHRleHQ6IHN0cmluZ1N0b3J5UGFja2FnZVN0cmluZ3Mubm9TdG9yeUZvcihzdHJpbmdTdG9yeUtleS5uYW1lKSwKICAgICksCiAgKTsKfQoKY2xhc3MgX01vYmlsZUNvbnRlbnQgZXh0ZW5kcyBIb29rV2lkZ2V0IHsKICBjb25zdCBfTW9iaWxlQ29udGVudCgpOwoKICBAb3ZlcnJpZGUKICBXaWRnZXQgYnVpbGQoQnVpbGRDb250ZXh0IGNvbnRleHQpIHsKICAgIGZpbmFsIHNoYXJlZCA9IGNvbnRleHQucmVhZDxfU2hhcmVkPigpOwoKICAgIHVzZUVmZmVjdCgoKSB7CiAgICAgIHNoYXJlZC5tb2JpbGVUYWIudmFsdWUgPSBfTW9iaWxlVGFicy5rZXlzOwogICAgICByZXR1cm4gbnVsbDsKICAgIH0sIFtdKTsKCiAgICByZXR1cm4gU2NhZmZvbGQoCiAgICAgIGFwcEJhcjogY29uc3QgX0FwcEJhcigpLAogICAgICBib2R5OiBMYXlvdXRCdWlsZGVyKAogICAgICAgIGJ1aWxkZXI6IChjb250ZXh0LCBjb25zdHJhaW50cykgewogICAgICAgICAgZmluYWwgY2VsbFdpZHRoID0gY29uc3RyYWludHMubWF4V2lkdGg7CiAgICAgICAgICByZXR1cm4gU2luZ2xlQ2hpbGRTY3JvbGxWaWV3KAogICAgICAgICAgICBjb250cm9sbGVyOiBzaGFyZWQuc2Nyb2xsQ29udHJvbGxlciwKICAgICAgICAgICAgcGh5c2ljczogY29uc3QgTmV2ZXJTY3JvbGxhYmxlU2Nyb2xsUGh5c2ljcygpLAogICAgICAgICAgICBzY3JvbGxEaXJlY3Rpb246IEF4aXMuaG9yaXpvbnRhbCwKICAgICAgICAgICAgY2hpbGQ6IFJvdygKICAgICAgICAgICAgICBjaGlsZHJlbjogWwogICAgICAgICAgICAgICAgU2l6ZWRCb3goCiAgICAgICAgICAgICAgICAgIHdpZHRoOiBjZWxsV2lkdGgsCiAgICAgICAgICAgICAgICAgIGNoaWxkOiBfS2V5c1RyZWUoCiAgICAgICAgICAgICAgICAgICAga2V5OiBzaGFyZWQua2V5c1RyZWVLZXksCiAgICAgICAgICAgICAgICAgICAgc2VhcmNoRmFkZUNvbG9yczogWwogICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5jb2xvcnMuc3VyZmFjZSwKICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuY29sb3JzLnN1cmZhY2Uud2l0aEFscGhhKDApCiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBTaXplZEJveCgKICAgICAgICAgICAgICAgICAgd2lkdGg6IGNlbGxXaWR0aCwKICAgICAgICAgICAgICAgICAgY2hpbGQ6IF9Db250ZW50KAogICAgICAgICAgICAgICAgICAgIGlzTW9iaWxlOiB0cnVlLAogICAgICAgICAgICAgICAgICAgIGtleTogc2hhcmVkLmNvbnRlbnRLZXksCiAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICksCiAgICAgICAgICApOwogICAgICAgIH0sCiAgICAgICksCiAgICAgIGZsb2F0aW5nQWN0aW9uQnV0dG9uOiBjb25zdCBfRmFiKCksCiAgICApOwogIH0KfQoKY2xhc3MgX0FwcEJhciBleHRlbmRzIEhvb2tXaWRnZXQgaW1wbGVtZW50cyBQcmVmZXJyZWRTaXplV2lkZ2V0IHsKICBjb25zdCBfQXBwQmFyKCk7CgogIEBvdmVycmlkZQogIFdpZGdldCBidWlsZChCdWlsZENvbnRleHQgY29udGV4dCkgewogICAgZmluYWwgc2hhcmVkID0gY29udGV4dC5yZWFkPF9TaGFyZWQ+KCk7CiAgICBmaW5hbCBpc0RldmVsb3BlciA9IFN0cmluZ1N0b3J5U2VydmljZS5pbnN0YW5jZS5jb25maWcuaXNEZXZlbG9wZXI7CiAgICB1c2VMaXN0ZW5hYmxlKHNoYXJlZC5zdGF0ZSk7CiAgICBmaW5hbCBpc1JlcG9ydGluZyA9IHVzZUxpc3RlbmFibGUoc2hhcmVkLmlzUmVwb3J0aW5nKS52YWx1ZTsKCiAgICBmaW5hbCBjYW5Qb3AgPSBOYXZpZ2F0b3Iub2YoY29udGV4dCkuY2FuUG9wKCk7CiAgICByZXR1cm4gU3RyaW5nU3RvcnlBcHBCYXIoCiAgICAgIGxlYWRpbmc6IGNhblBvcAogICAgICAgICAgPyBSb3coCiAgICAgICAgICAgICAgbWFpbkF4aXNTaXplOiBNYWluQXhpc1NpemUubWluLAogICAgICAgICAgICAgIGNoaWxkcmVuOiBbCiAgICAgICAgICAgICAgICBpZiAoIWlzUmVwb3J0aW5nKSBjb25zdCBTdHJpbmdTdG9yeUFwcEJhckxlYWRpbmcoKSwKICAgICAgICAgICAgICAgIGlmIChpc0RldmVsb3BlciAmJiAhaXNSZXBvcnRpbmcpIFNIX1hTLAogICAgICAgICAgICAgICAgaWYgKGlzRGV2ZWxvcGVyKQogICAgICAgICAgICAgICAgICBJY29uQnV0dG9uKAogICAgICAgICAgICAgICAgICAgIG9uUHJlc3NlZDogKCkgewogICAgICAgICAgICAgICAgICAgICAgaWYgKCFzaGFyZWQuaXNSZXBvcnRpbmcudmFsdWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgc2hhcmVkLnBsYXkoKTsKICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHNoYXJlZC5zdG9wKCk7CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBpY29uOiBjb25zdCBJY29uKEljb25zLmJ1Z19yZXBvcnQpLAogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICkKICAgICAgICAgIDogT3V0bGluZWRCdXR0b24oCiAgICAgICAgICAgICAgb25QcmVzc2VkOgogICAgICAgICAgICAgICAgICBTdHJpbmdTdG9yeVNlcnZpY2UuaW5zdGFuY2UuaW5BcHBFZGl0b3JDb25maWcub25UcnlUaGVBcHAsCiAgICAgICAgICAgICAgY2hpbGQ6IFRleHQoc3RyaW5nU3RvcnlQYWNrYWdlU3RyaW5ncy50cnlUaGVBcHApLAogICAgICAgICAgICApLAogICAgICBwcm9ncmVzc1dpZGdldDogaXNSZXBvcnRpbmcKICAgICAgICAgID8gY29uc3QgX0luc3BlY3RvclByb2dyZXNzSW5kaWNhdG9yKCkKICAgICAgICAgIDogY29uc3QgX1N0cmluZ3NQcm9ncmVzc0luZGljYXRvcigpLAogICAgICB0aXRsZTogaXNSZXBvcnRpbmcKICAgICAgICAgID8gIiIKICAgICAgICAgIDogY29udGV4dC5zZWxlY3QoKFNsYW5nRWRpdG9yQ3ViaXQgYykgewogICAgICAgICAgICAgIGlmIChjLnN0YXRlLnByb2dyZXNzID09IDAuMCkgewogICAgICAgICAgICAgICAgcmV0dXJuICIiOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpZiAoYy5zdGF0ZS5wcm9ncmVzcyA9PSAxLjApIHsKICAgICAgICAgICAgICAgIHJldHVybiBzdHJpbmdTdG9yeVBhY2thZ2VTdHJpbmdzLmFsbERvbmVFeGNsYW1hdGlvbjsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgcmV0dXJuIHN0cmluZ1N0b3J5UGFja2FnZVN0cmluZ3MucGVyY2VudENvbXBsZXRlZCgKICAgICAgICAgICAgICAgICAgKGMuc3RhdGUucHJvZ3Jlc3MgKiAxMDApLnRvU3RyaW5nQXNGaXhlZCgyKSk7CiAgICAgICAgICAgIH0pLAogICAgICB0cmFpbGluZzogaXNSZXBvcnRpbmcKICAgICAgICAgID8gbnVsbAogICAgICAgICAgOiBPdXRsaW5lZEJ1dHRvbigKICAgICAgICAgICAgICBvblByZXNzZWQ6ICgpIHsKICAgICAgICAgICAgICAgIExvY2FsZVN1Ym1pdFNoZWV0LnNob3coCiAgICAgICAgICAgICAgICAgIGNvbnRleHQsCiAgICAgICAgICAgICAgICAgIGVkaXRvckN1Yml0OiBjb250ZXh0LnJlYWQoKSwKICAgICAgICAgICAgICAgICAgYmFzZUN1Yml0OiBjb250ZXh0LnJlYWQoKSwKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBjaGlsZDogVGV4dChzdHJpbmdTdG9yeVBhY2thZ2VTdHJpbmdzLnN1Ym1pdCksCiAgICAgICAgICAgICksCiAgICApOwogIH0KCiAgQG92ZXJyaWRlCiAgU2l6ZSBnZXQgcHJlZmVycmVkU2l6ZSA9PiBjb25zdCBTaXplLmZyb21IZWlnaHQoRGltZW5zaW9uc0RvdWJsZS54eGwpOwp9CgpjbGFzcyBfU3RyaW5nc1Byb2dyZXNzSW5kaWNhdG9yIGV4dGVuZHMgSG9va1dpZGdldCB7CiAgY29uc3QgX1N0cmluZ3NQcm9ncmVzc0luZGljYXRvcigpOwoKICBAb3ZlcnJpZGUKICBXaWRnZXQgYnVpbGQoQnVpbGRDb250ZXh0IGNvbnRleHQpIHsKICAgIGZpbmFsIHNsYW5nRWRpdG9yID0gY29udGV4dC53YXRjaDxTbGFuZ0VkaXRvckN1Yml0PigpOwogICAgZmluYWwgZWRpdG9yU3RhdGUgPSBzbGFuZ0VkaXRvci5zdGF0ZTsKICAgIGZpbmFsIGFwcHJvdmVkS2V5cyA9IGNvbnRleHQuc2VsZWN0KChTbGFuZ0Jhc2VDdWJpdCBjKSA9PiBjLnN0YXRlCiAgICAgICAgICAgIC5tYXliZU1hcChkYXRhOiAoaXQpID0+IGl0LmFwcHJvdmVkS2V5cywgb3JFbHNlOiAoKSA9PiBudWxsKSkgPz8KICAgICAgICA8U3RyaW5nPltdOwogICAgZmluYWwgc2VsZWN0ZWRLZXkgPSB1c2VNZW1vaXplZCgoKSB7CiAgICAgIGZpbmFsIG5vcm1hbGl6ZWQgPSBlZGl0b3JTdGF0ZS5zZWxlY3RlZEtleT8uc3BsaXQoIi4iKS5maXJzdDsKICAgICAgcmV0dXJuIFN0cmluZ0tleS52YWx1ZXMuZmlyc3RXaGVyZU9yTnVsbCgoaXQpID0+IGl0LmtleSA9PSBub3JtYWxpemVkKTsKICAgIH0sIFtlZGl0b3JTdGF0ZS5zZWxlY3RlZEtleV0pOwogICAgZmluYWwga2V5U3RhdHVzZXMgPSBTdHJpbmdLZXkudmFsdWVzLm1hcCgoa2V5KSA9PiBTdHJpbmdLZXlTdGF0dXMoCiAgICAgICAgICBpc0FwcHJvdmVkOiBhcHByb3ZlZEtleXMuY29udGFpbnMoa2V5LmtleSksCiAgICAgICAgICBpc0NoYW5nZWQ6IGVkaXRvclN0YXRlLmhhc0tleUNoYW5nZWQoa2V5LmtleSksCiAgICAgICAgICBpc1NlbGVjdGVkOiBzZWxlY3RlZEtleSA9PSBrZXksCiAgICAgICAgICBpc1NlYXJjaGVkOiBlZGl0b3JTdGF0ZS5zZWFyY2hSZXN1bHRzLmNvbnRhaW5zKGtleS5rZXkpLAogICAgICAgICkpOwoKICAgIHJldHVybiBfUHJvZ3Jlc3NJbmRpY2F0b3Ioa2V5U3RhdHVzZXMubWFwKChpdCkgPT4gaXQuYXNDb2xvcigpKS50b0xpc3QoKSk7CiAgfQp9CgpjbGFzcyBfSW5zcGVjdG9yUHJvZ3Jlc3NJbmRpY2F0b3IgZXh0ZW5kcyBIb29rV2lkZ2V0IHsKICBjb25zdCBfSW5zcGVjdG9yUHJvZ3Jlc3NJbmRpY2F0b3IoKTsKCiAgQG92ZXJyaWRlCiAgV2lkZ2V0IGJ1aWxkKEJ1aWxkQ29udGV4dCBjb250ZXh0KSB7CiAgICBmaW5hbCBjb2xvcnMgPQogICAgICAgIHVzZUxpc3RlbmFibGUoY29udGV4dC5yZWFkPF9TaGFyZWQ+KCkucmVwb3J0ZXJzSW5kaWNhdG9yKS52YWx1ZTsKCiAgICByZXR1cm4gX1Byb2dyZXNzSW5kaWNhdG9yKGNvbG9ycyk7CiAgfQp9CgpjbGFzcyBfUHJvZ3Jlc3NJbmRpY2F0b3IgZXh0ZW5kcyBIb29rV2lkZ2V0IHsKICBjb25zdCBfUHJvZ3Jlc3NJbmRpY2F0b3IodGhpcy5jb2xvcnMpOwoKICBzdGF0aWMgY29uc3QgaGVpZ2h0ID0gRGltZW5zaW9uc0RvdWJsZS5zOwogIGZpbmFsIExpc3Q8Q29sb3I+IGNvbG9yczsKCiAgQG92ZXJyaWRlCiAgV2lkZ2V0IGJ1aWxkKEJ1aWxkQ29udGV4dCBjb250ZXh0KSB7CiAgICBmaW5hbCBkZWZhdWx0Q29sb3IgPSBjb250ZXh0LmNvbG9ycy5vblN1cmZhY2Uud2l0aFZhbHVlcyhhbHBoYTogMC4yKTsKICAgIHJldHVybiBTaXplZEJveCgKICAgICAgaGVpZ2h0OiBoZWlnaHQsCiAgICAgIHdpZHRoOiBkb3VibGUuaW5maW5pdHksCiAgICAgIGNoaWxkOiBDbGlwUlJlY3QoCiAgICAgICAgYm9yZGVyUmFkaXVzOiBjb25zdCBCb3JkZXJSYWRpdXMuYWxsKAogICAgICAgICAgUmFkaXVzLmNpcmN1bGFyKERpbWVuc2lvbnNEb3VibGUucyAvIDIpLAogICAgICAgICksCiAgICAgICAgY2hpbGQ6IFN0YWNrKAogICAgICAgICAgY2hpbGRyZW46IFsKICAgICAgICAgICAgUG9zaXRpb25lZC5maWxsKGNoaWxkOiBDb2xvcmVkQm94KGNvbG9yOiBkZWZhdWx0Q29sb3IpKSwKICAgICAgICAgICAgUG9zaXRpb25lZC5maWxsKGNoaWxkOiBfQ29sb3JzUHJvZ3Jlc3NCYXIoY29sb3JzOiBjb2xvcnMpKQogICAgICAgICAgXSwKICAgICAgICApLAogICAgICApLAogICAgKTsKICB9Cn0KCmNsYXNzIF9Db2xvcnNQcm9ncmVzc0JhciBleHRlbmRzIFN0YXRlbGVzc1dpZGdldCB7CiAgZmluYWwgTGlzdDxDb2xvcj4gY29sb3JzOwoKICBjb25zdCBfQ29sb3JzUHJvZ3Jlc3NCYXIoe3JlcXVpcmVkIHRoaXMuY29sb3JzfSk7CgogIEBvdmVycmlkZQogIFdpZGdldCBidWlsZChCdWlsZENvbnRleHQgY29udGV4dCkgewogICAgcmV0dXJuIEN1c3RvbVBhaW50KAogICAgICBwYWludGVyOiBfQ29sb3JzUHJvZ3Jlc3NCYXJQYWludGVyKGNvbG9yczogY29sb3JzKSwKICAgICk7CiAgfQp9CgpjbGFzcyBfQ29sb3JzUHJvZ3Jlc3NCYXJQYWludGVyIGV4dGVuZHMgQ3VzdG9tUGFpbnRlciB7CiAgZmluYWwgTGlzdDxDb2xvcj4gY29sb3JzOwoKICBfQ29sb3JzUHJvZ3Jlc3NCYXJQYWludGVyKHtyZXF1aXJlZCB0aGlzLmNvbG9yc30pOwoKICBAb3ZlcnJpZGUKICB2b2lkIHBhaW50KENhbnZhcyBjYW52YXMsIFNpemUgc2l6ZSkgewogICAgZG91YmxlIGJhcldpZHRoID0gc2l6ZS53aWR0aCAvIGNvbG9ycy5sZW5ndGg7CgogICAgZm9yIChpbnQgaSA9IDA7IGkgPCBjb2xvcnMubGVuZ3RoOyBpKyspIHsKICAgICAgZmluYWwgcGFpbnQgPSBQYWludCgpCiAgICAgICAgLi5jb2xvciA9IGNvbG9yc1tpXQogICAgICAgIC4uc3R5bGUgPSBQYWludGluZ1N0eWxlLmZpbGw7CgogICAgICBjYW52YXMuZHJhd1JlY3QoCiAgICAgICAgLy8gQWRkIGEgc21hbGwgb3ZlcmxhcCB0byBlbGltaW5hdGUgdGhlIGxpbmVzCiAgICAgICAgUmVjdC5mcm9tTFRXSChpICogYmFyV2lkdGgsIDAsIGJhcldpZHRoICogMS4xLCBzaXplLmhlaWdodCksCiAgICAgICAgcGFpbnQsCiAgICAgICk7CiAgICB9CiAgfQoKICBAb3ZlcnJpZGUKICBib29sIHNob3VsZFJlcGFpbnQoY292YXJpYW50IEN1c3RvbVBhaW50ZXIgb2xkRGVsZWdhdGUpIHsKICAgIHJldHVybiB0cnVlOwogIH0KfQoKY2xhc3MgX1N0b3J5U3RhdGUgewogIGZpbmFsIFN0cmluZ0tleSBhY3RpdmVLZXk7CiAgZmluYWwgTGlzdDxTdHJpbmdTdG9yeT4gYXZhaWxhYmxlU3RvcmllczsKICBmaW5hbCBpbnQgc2VsZWN0ZWRTdG9yeUluZGV4OwogIGZpbmFsIGludCByZWZyZXNoQ291bnRlcjsKCiAgX1N0b3J5U3RhdGUoewogICAgcmVxdWlyZWQgdGhpcy5hY3RpdmVLZXksCiAgICByZXF1aXJlZCB0aGlzLmF2YWlsYWJsZVN0b3JpZXMsCiAgICByZXF1aXJlZCB0aGlzLnNlbGVjdGVkU3RvcnlJbmRleCwKICAgIHJlcXVpcmVkIHRoaXMucmVmcmVzaENvdW50ZXIsCiAgfSk7CgogIGJvb2wgZ2V0IHNob3dDb250cm9scyA9PiBhdmFpbGFibGVTdG9yaWVzLmxlbmd0aCA+IDE7CiAgU3RyaW5nU3Rvcnk/IGdldCBlZmZlY3RpdmVTdHJpbmdTdG9yeSA9PgogICAgICBhdmFpbGFibGVTdG9yaWVzLmlzRW1wdHkgPyBudWxsIDogYXZhaWxhYmxlU3Rvcmllc1tzZWxlY3RlZFN0b3J5SW5kZXhdOwogIFN0cmluZyBnZXQgZWZmZWN0aXZlVGl0bGUgPT4gZWZmZWN0aXZlU3RyaW5nU3Rvcnk/LnRpdGxlID8/ICIiOwoKICBfU3RvcnlTdGF0ZSBuZXh0KCkgewogICAgaWYgKHNlbGVjdGVkU3RvcnlJbmRleCA8IGF2YWlsYWJsZVN0b3JpZXMubGVuZ3RoIC0gMSkgewogICAgICByZXR1cm4gY29weVdpdGgoc2VsZWN0ZWRTdG9yeUluZGV4OiBzZWxlY3RlZFN0b3J5SW5kZXggKyAxKTsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBjb3B5V2l0aChzZWxlY3RlZFN0b3J5SW5kZXg6IDApOwogICAgfQogIH0KCiAgX1N0b3J5U3RhdGUgcHJldigpIHsKICAgIGlmIChzZWxlY3RlZFN0b3J5SW5kZXggPiAwKSB7CiAgICAgIHJldHVybiBjb3B5V2l0aChzZWxlY3RlZFN0b3J5SW5kZXg6IHNlbGVjdGVkU3RvcnlJbmRleCAtIDEpOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIGNvcHlXaXRoKHNlbGVjdGVkU3RvcnlJbmRleDogYXZhaWxhYmxlU3Rvcmllcy5sZW5ndGggLSAxKTsKICAgIH0KICB9CgogIF9TdG9yeVN0YXRlIHJlZnJlc2goKSB7CiAgICByZXR1cm4gY29weVdpdGgocmVmcmVzaENvdW50ZXI6IHJlZnJlc2hDb3VudGVyICsgMSk7CiAgfQoKICBfU3RvcnlTdGF0ZSBjb3B5V2l0aCh7CiAgICBTdHJpbmdLZXk/IGFjdGl2ZUtleSwKICAgIExpc3Q8U3RyaW5nU3Rvcnk+PyBhdmFpbGFibGVTdG9yaWVzLAogICAgaW50PyBzZWxlY3RlZFN0b3J5SW5kZXgsCiAgICBpbnQ/IHJlZnJlc2hDb3VudGVyLAogIH0pID0+CiAgICAgIF9TdG9yeVN0YXRlKAogICAgICAgIGFjdGl2ZUtleTogYWN0aXZlS2V5ID8/IHRoaXMuYWN0aXZlS2V5LAogICAgICAgIGF2YWlsYWJsZVN0b3JpZXM6IGF2YWlsYWJsZVN0b3JpZXMgPz8gdGhpcy5hdmFpbGFibGVTdG9yaWVzLAogICAgICAgIHNlbGVjdGVkU3RvcnlJbmRleDogc2VsZWN0ZWRTdG9yeUluZGV4ID8/IHRoaXMuc2VsZWN0ZWRTdG9yeUluZGV4LAogICAgICAgIHJlZnJlc2hDb3VudGVyOiByZWZyZXNoQ291bnRlciA/PyB0aGlzLnJlZnJlc2hDb3VudGVyLAogICAgICApOwp9CgpjbGFzcyBfU2hhcmVkIHsKICBfU2hhcmVkKHRoaXMuZWRpdG9yKTsKICBmaW5hbCBrZXlzVHJlZUtleSA9IEdsb2JhbEtleSgpOwogIGZpbmFsIGNvbnRlbnRLZXkgPSBHbG9iYWxLZXkoKTsKICBmaW5hbCBsb2NhbGVFZGl0b3JLZXkgPSBHbG9iYWxLZXkoKTsKICBmaW5hbCBzdGF0ZSA9IFZhbHVlTm90aWZpZXI8X1N0b3J5U3RhdGU/PihudWxsKTsKCiAgZmluYWwgc3RyaW5nU3Rvcmllc01lbW9pemVkID0gc3RyaW5nU3RvcmllcygpOwoKICBmaW5hbCBzY3JvbGxDb250cm9sbGVyID0gU2Nyb2xsQ29udHJvbGxlcigpOwogIGZpbmFsIG1vYmlsZVRhYiA9IFZhbHVlTm90aWZpZXIoX01vYmlsZVRhYnMua2V5cyk7CiAgZmluYWwgcmVwb3J0ZXJzSW5kaWNhdG9yID0gVmFsdWVOb3RpZmllcjxMaXN0PENvbG9yPj4oW10pOwoKICBmaW5hbCBfcmVwb3J0ZXJzID0gPFN0cmluZ1N0b3J5LCBfU3RvcnlSZXBvcnRlcj57fTsKICBmaW5hbCBpc1JlcG9ydGluZyA9IFZhbHVlTm90aWZpZXIoZmFsc2UpOwogIGZpbmFsIFNsYW5nRWRpdG9yQ3ViaXQgZWRpdG9yOwoKICB2b2lkIHJlZnJlc2goKSB7CiAgICBzdGF0ZS52YWx1ZSA9IHN0YXRlLnZhbHVlPy5yZWZyZXNoKCk7CiAgfQoKICB2b2lkIGN1cnJlbnRSZXBvcnQoKSB7CiAgICBmaW5hbCByZXBvcnRlciA9IF9yZXBvcnRlcnNbc3RhdGUudmFsdWU/LmVmZmVjdGl2ZVN0cmluZ1N0b3J5XTsKICAgIGlmIChyZXBvcnRlciA9PSBudWxsKSB7CiAgICAgIF9sb2cuZSgiY3VycmVudFJlcG9ydCgpIDogQ291bGQgbm90IGZpbmQgYSByZXBvcnRlciIpOwogICAgICByZXR1cm47CiAgICB9CiAgICByZXBvcnRlci5sb2dSZXBvcnQoKTsKICB9CgogIF9TdG9yeVN0YXRlIGNyZWF0ZShTdHJpbmdLZXkga2V5KSB7CiAgICBmaW5hbCBhdmFpbGFibGVTdG9yaWVzID0KICAgICAgICBzdHJpbmdTdG9yaWVzTWVtb2l6ZWQud2hlcmUoKGl0KSA9PiBpdC5rZXlzLmNvbnRhaW5zKGtleSkpLnRvTGlzdCgpOwoKICAgIHJldHVybiBfU3RvcnlTdGF0ZSgKICAgICAgYWN0aXZlS2V5OiBrZXksCiAgICAgIGF2YWlsYWJsZVN0b3JpZXM6IGF2YWlsYWJsZVN0b3JpZXMsCiAgICAgIHNlbGVjdGVkU3RvcnlJbmRleDogMCwKICAgICAgcmVmcmVzaENvdW50ZXI6IDAsCiAgICApOwogIH0KCiAgdm9pZCBzZXRBY3RpdmVTdG9yeSh7CiAgICBTdHJpbmdLZXk/IGtleSwKICB9KSB7CiAgICBpZiAoa2V5ID09IG51bGwpIHsKICAgICAgc3RhdGUudmFsdWUgPSBudWxsOwogICAgICByZXR1cm47CiAgICB9CgogICAgc3RhdGUudmFsdWUgPSBjcmVhdGUoa2V5KTsKICB9CgogIFRyYW5zbGF0aW9uU2NvcGVLZXlzPyBnZXRTY29wZUtleXNCeVN0cmluZ1N0b3J5KFN0cmluZ1N0b3J5PyBzdG9yeSkgewogICAgaWYgKHN0b3J5ID09IG51bGwpIHsKICAgICAgcmV0dXJuIG51bGw7CiAgICB9CgogICAgdmFyIHJlcG9ydGVyID0gX3JlcG9ydGVyc1tzdG9yeV07CiAgICBpZiAocmVwb3J0ZXIgPT0gbnVsbCkgewogICAgICByZXBvcnRlciA9IF9TdG9yeVJlcG9ydGVyKAogICAgICAgIHRpdGxlOiBzdG9yeS50aXRsZSwKICAgICAgICBleHBlY3RlZDogU2V0LmZyb20oc3Rvcnkua2V5cyksCiAgICAgICk7CiAgICAgIF9yZXBvcnRlcnNbc3RvcnldID0gcmVwb3J0ZXI7CiAgICB9CgogICAgcmV0dXJuIHJlcG9ydGVyLmtleXM7CiAgfQoKICB2b2lkIG1vdmVUb01vYmlsZVRhYihfTW9iaWxlVGFicyB0YWIpIHsKICAgIHN3aXRjaCAodGFiKSB7CiAgICAgIGNhc2UgX01vYmlsZVRhYnMua2V5czoKICAgICAgICBzY3JvbGxDb250cm9sbGVyLmp1bXBUbygwKTsKICAgICAgY2FzZSBfTW9iaWxlVGFicy5wcmV2aWV3OgogICAgICAgIHNjcm9sbENvbnRyb2xsZXIuanVtcFRvKHNjcm9sbENvbnRyb2xsZXIucG9zaXRpb24ubWF4U2Nyb2xsRXh0ZW50KTsKICAgICAgICByZWZyZXNoKCk7CiAgICB9CiAgICBtb2JpbGVUYWIudmFsdWUgPSB0YWI7CiAgfQoKICB2b2lkIF9jb21wdXRlUmVwb3J0ZXJDb2xvcnMoKSB7CiAgICBmaW5hbCBjb2xvcnMgPSBzdHJpbmdTdG9yaWVzTWVtb2l6ZWQubWFwKChpdCkgPT4gX3JlcG9ydGVyc1tpdF0pLm1hcCgoaXQpIHsKICAgICAgaWYgKGl0ID09IG51bGwgfHwgIWl0LmdvdENhbGxlZCkgewogICAgICAgIHJldHVybiBDb2xvcnMudHJhbnNwYXJlbnQ7CiAgICAgIH0KICAgICAgaWYgKGl0Lm1pc3NpbmdLZXlzKCkuaXNOb3RFbXB0eSkgewogICAgICAgIHJldHVybiBDb2xvcnMuYW1iZXJBY2NlbnQ7CiAgICAgIH0KICAgICAgcmV0dXJuIENvbG9ycy5ncmVlbkFjY2VudDsKICAgIH0pLnRvTGlzdCgpOwogICAgcmVwb3J0ZXJzSW5kaWNhdG9yLnZhbHVlID0gY29sb3JzOwogIH0KCiAgdm9pZCBkaXNwb3NlKCkgewogICAgc2Nyb2xsQ29udHJvbGxlci5kaXNwb3NlKCk7CiAgICBpc1JlcG9ydGluZy52YWx1ZSA9IGZhbHNlOwogIH0KCiAgRnV0dXJlPHZvaWQ+IHN0b3AoKSBhc3luYyB7CiAgICBpc1JlcG9ydGluZy52YWx1ZSA9IGZhbHNlOwogIH0KCiAgc3RhdGljIGNvbnN0IGtTdGVwRHVyYXRpb24gPSBEdXJhdGlvbihtaWxsaXNlY29uZHM6IDMwMCk7CgogIEZ1dHVyZTx2b2lkPiBwbGF5KCkgYXN5bmMgewogICAgX2NvbXB1dGVSZXBvcnRlckNvbG9ycygpOwogICAgaXNSZXBvcnRpbmcudmFsdWUgPSB0cnVlOwoKICAgIC8vIGNsZWFyIHN0YWdlCiAgICBzdGF0ZS52YWx1ZSA9IG51bGw7CiAgICBhd2FpdCBGdXR1cmUuZGVsYXllZChrU3RlcER1cmF0aW9uKTsKICAgIF9yZXBvcnRlcnMuZm9yRWFjaCgoXywgaXQpID0+IGl0LmNsZWFyKCkpOwoKICAgIHN3aXRjaFRvKFN0cmluZ1N0b3J5IHN0b3J5LCB7U3RyaW5nS2V5PyBwcmVmZXJyZWRLZXl9KSB7CiAgICAgIGZpbmFsIGVmZmVjdGl2ZUtleSA9IHByZWZlcnJlZEtleSA/PyBzdG9yeS5rZXlzLmZpcnN0OwogICAgICB2YXIgbmV4dFN0YXRlID0gY3JlYXRlKGVmZmVjdGl2ZUtleSk7CiAgICAgIGFzc2VydChzdG9yeS5rZXlzLmNvbnRhaW5zKGVmZmVjdGl2ZUtleSkpOwogICAgICBmaW5hbCBpbmRleCA9IG5leHRTdGF0ZS5hdmFpbGFibGVTdG9yaWVzLmluZGV4T2Yoc3RvcnkpOwogICAgICBpZiAoaW5kZXggIT0gLTEpIHsKICAgICAgICBuZXh0U3RhdGUgPSBuZXh0U3RhdGUuY29weVdpdGgoc2VsZWN0ZWRTdG9yeUluZGV4OiBpbmRleCk7CiAgICAgIH0KICAgICAgc3RhdGUudmFsdWUgPSBuZXh0U3RhdGU7CiAgICB9CgogICAgLy8gaXRlcmF0ZSBvdmVyIGVhY2ggc3RvcnkKICAgIGZvciAoZmluYWwgc3RvcnkgaW4gc3RyaW5nU3Rvcmllc01lbW9pemVkKSB7CiAgICAgIGlmICghaXNSZXBvcnRpbmcudmFsdWUpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgc3dpdGNoVG8oc3RvcnkpOwogICAgICBhd2FpdCBGdXR1cmUuZGVsYXllZChrU3RlcER1cmF0aW9uKTsKICAgICAgZmluYWwgcmVwb3J0ZXIgPSBfcmVwb3J0ZXJzW3N0b3J5XTsKICAgICAgaWYgKHJlcG9ydGVyID09IG51bGwpIHsKICAgICAgICBpc1JlcG9ydGluZy52YWx1ZSA9IGZhbHNlOwogICAgICAgIF9sb2cuZSgKICAgICAgICAgICAgIlNvbWV0aGluZyB3ZW50IHdyb25nIC0gY291bGQgbm90IGZpbmQgcmVwb3J0ZXIgZm9yICR7c3RvcnkudGl0bGV9Iik7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICBmaW5hbCBtaXNzaW5nS2V5cyA9IHJlcG9ydGVyLm1pc3NpbmdLZXlzKCk7CiAgICAgIGZvciAoZmluYWwgbWlzc2luZ0tleSBpbiBtaXNzaW5nS2V5cykgewogICAgICAgIGlmIChyZXBvcnRlci5taXNzaW5nS2V5cygpLmlzRW1wdHkpIHsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgICBpZiAoIWlzUmVwb3J0aW5nLnZhbHVlKSB7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIHN3aXRjaFRvKHN0b3J5LCBwcmVmZXJyZWRLZXk6IG1pc3NpbmdLZXkpOwogICAgICAgIGF3YWl0IEZ1dHVyZS5kZWxheWVkKGtTdGVwRHVyYXRpb24pOwogICAgICB9CiAgICAgIF9jb21wdXRlUmVwb3J0ZXJDb2xvcnMoKTsKICAgICAgcmVwb3J0ZXIubG9nUmVwb3J0KCk7CiAgICB9CgogICAgLy8gbG9nIHN1bW1hcnkKICAgIGZpbmFsIHRvdGFsU3RvcmllcyA9IHN0cmluZ1N0b3JpZXNNZW1vaXplZC5sZW5ndGg7CiAgICBmaW5hbCBva1N0b3JpZXMgPQogICAgICAgIF9yZXBvcnRlcnMudmFsdWVzLndoZXJlKChpdCkgPT4gaXQubWlzc2luZ0tleXMoKS5pc0VtcHR5KS5sZW5ndGg7CiAgICBmaW5hbCBzdG9yaWVzV2l0aE1pc3NpbmdLZXlzID0gX3JlcG9ydGVycy52YWx1ZXMKICAgICAgICAud2hlcmUoKGl0KSA9PiBpdC5taXNzaW5nS2V5cygpLmlzTm90RW1wdHkgJiYgaXQuZ290Q2FsbGVkKTsKICAgIGZpbmFsIHN0b3JpZXNOb3RDYWxsZWQgPQogICAgICAgIF9yZXBvcnRlcnMudmFsdWVzLndoZXJlKChpdCkgPT4gaXQuZ290Q2FsbGVkID09IGZhbHNlKTsKCiAgICBmaW5hbCBzYiA9IFN0cmluZ0J1ZmZlcigpCiAgICAgIC4ud3JpdGVsbigpCiAgICAgIC4ud3JpdGVsbigiVG90YWwgU3RvcmllczogJHRvdGFsU3RvcmllcyIpCiAgICAgIC4ud3JpdGVsbigiT0sgU3RvcmllczogJG9rU3RvcmllcyIpOwoKICAgIGlmIChzdG9yaWVzV2l0aE1pc3NpbmdLZXlzLmlzTm90RW1wdHkpIHsKICAgICAgc2Iud3JpdGVsbigiU3RvcmllcyBXaXRoIE1pc3NpbmcgS2V5czogJHtzdG9yaWVzV2l0aE1pc3NpbmdLZXlzLmxlbmd0aH0iKTsKICAgICAgZm9yIChmaW5hbCBzdG9yeSBpbiBzdG9yaWVzV2l0aE1pc3NpbmdLZXlzKSB7CiAgICAgICAgc2Iud3JpdGVsbigiICAtICR7c3RvcnkudGl0bGV9Iik7CiAgICAgIH0KICAgIH0KCiAgICBpZiAoc3Rvcmllc05vdENhbGxlZC5pc05vdEVtcHR5KSB7CiAgICAgIHNiLndyaXRlbG4oIlN0b3JpZXMgTm90IENhbGxlZDogJHtzdG9yaWVzTm90Q2FsbGVkLmxlbmd0aH0iKTsKICAgICAgZm9yIChmaW5hbCBzdG9yeSBpbiBzdG9yaWVzTm90Q2FsbGVkKSB7CiAgICAgICAgc2Iud3JpdGVsbigiICAtICR7c3RvcnkudGl0bGV9Iik7CiAgICAgIH0KICAgIH0KICAgIF9sb2cuaShzYi50b1N0cmluZygpKTsKICB9Cn0KCmVudW0gX01vYmlsZVRhYnMgeyBrZXlzLCBwcmV2aWV3IH0KCmNsYXNzIF9GYWIgZXh0ZW5kcyBIb29rV2lkZ2V0IHsKICBjb25zdCBfRmFiKCk7CgogIEBvdmVycmlkZQogIFdpZGdldCBidWlsZChCdWlsZENvbnRleHQgY29udGV4dCkgewogICAgZmluYWwgc2hhcmVkID0gY29udGV4dC5yZWFkPF9TaGFyZWQ+KCk7CiAgICB1c2VMaXN0ZW5hYmxlKHNoYXJlZC5tb2JpbGVUYWIpOwogICAgcmV0dXJuIEZsb2F0aW5nQWN0aW9uQnV0dG9uLnNtYWxsKAogICAgICBvblByZXNzZWQ6ICgpIHsKICAgICAgICBmaW5hbCBuZXh0VGFiID0gc3dpdGNoIChzaGFyZWQubW9iaWxlVGFiLnZhbHVlKSB7CiAgICAgICAgICBfTW9iaWxlVGFicy5rZXlzID0+IF9Nb2JpbGVUYWJzLnByZXZpZXcsCiAgICAgICAgICBfTW9iaWxlVGFicy5wcmV2aWV3ID0+IF9Nb2JpbGVUYWJzLmtleXMsCiAgICAgICAgfTsKICAgICAgICBzaGFyZWQubW92ZVRvTW9iaWxlVGFiKG5leHRUYWIpOwogICAgICB9LAogICAgICBjaGlsZDogSWNvbigKICAgICAgICBzd2l0Y2ggKHNoYXJlZC5tb2JpbGVUYWIudmFsdWUpIHsKICAgICAgICAgIF9Nb2JpbGVUYWJzLmtleXMgPT4gSWNvbnMucGhvbmVfYW5kcm9pZF9vdXRsaW5lZCwKICAgICAgICAgIF9Nb2JpbGVUYWJzLnByZXZpZXcgPT4gSWNvbnMuZWRpdCwKICAgICAgICB9LAogICAgICApLAogICAgKTsKICB9Cn0KCmZpbmFsIF9sb2cgPSBTdHJpbmdTdG9yeUxvZ2dlcigiU3RvcnlSZXBvcnQiKTsKCmNsYXNzIF9TdG9yeVJlcG9ydGVyIHsKICBfU3RvcnlSZXBvcnRlcih7CiAgICByZXF1aXJlZCB0aGlzLnRpdGxlLAogICAgcmVxdWlyZWQgdGhpcy5leHBlY3RlZCwKICB9KTsKICBmaW5hbCBTdHJpbmcgdGl0bGU7CiAgbGF0ZSBmaW5hbCBUcmFuc2xhdGlvblNjb3BlS2V5cyBrZXlzID0gVHJhbnNsYXRpb25TY29wZUtleXMob25BZGQ6IG9uQWRkKTsKICBmaW5hbCBTZXQ8U3RyaW5nS2V5PiBleHBlY3RlZDsKICBmaW5hbCBvY2N1cmVkID0gPFN0cmluZ0tleT57fTsKICB2YXIgZ290Q2FsbGVkID0gZmFsc2U7CgogIHZvaWQgY2xlYXIoKSB7CiAgICBnb3RDYWxsZWQgPSBmYWxzZTsKICAgIG9jY3VyZWQuY2xlYXIoKTsKICB9CgogIFNldDxTdHJpbmdLZXk+IG1pc3NpbmdLZXlzKCkgPT4KICAgICAgU2V0PFN0cmluZ0tleT4uZnJvbShleHBlY3RlZCkuLnJlbW92ZUFsbChvY2N1cmVkKTsKCiAgdm9pZCBvbkFkZChTdHJpbmcgdmFsdWUpIHsKICAgIGZpbmFsIHN0cmluZ0tleSA9IFN0cmluZ0tleUV4dC5mcm9tU3RyaW5nKHZhbHVlKTsKICAgIGlmIChzdHJpbmdLZXkgPT0gbnVsbCkgewogICAgICBfbG9nLmQoIlskdGl0bGVdIGRpZG4ndCBmaW5kIGEgU3RyaW5nS2V5IGVudW0gZm9yICR2YWx1ZSIpOwogICAgICByZXR1cm47CiAgICB9CiAgICBvY2N1cmVkLmFkZChzdHJpbmdLZXkpOwogICAgZ290Q2FsbGVkID0gdHJ1ZTsKICB9CgogIHZvaWQgbG9nUmVwb3J0KCkgewogICAgZmluYWwgcmVwb3J0ID0gdGhpczsKICAgIGZpbmFsIG1pc3NpbmdLZXlzID0gdGhpcy5taXNzaW5nS2V5cygpOwogICAgZmluYWwgb3ZlclJlcG9ydGVkID0gU2V0PFN0cmluZ0tleT4uZnJvbShyZXBvcnQub2NjdXJlZCkKICAgICAgLi5yZW1vdmVBbGwocmVwb3J0LmV4cGVjdGVkKTsKICAgIGZpbmFsIGlzTWlzc2luZ0tleXMgPSBtaXNzaW5nS2V5cy5pc05vdEVtcHR5OwogICAgZmluYWwgaGFzT3ZlclJlcG9ydGVkID0gb3ZlclJlcG9ydGVkLmlzTm90RW1wdHk7CgogICAgZmluYWwgc2IgPSBTdHJpbmdCdWZmZXIoKTsKICAgIHNiLndyaXRlbG4oW3JlcG9ydC50aXRsZV0pOwogICAgc2Iud3JpdGVsbigiICBvY2N1cmVkOiAke29jY3VyZWQubGVuZ3RofSIpOwogICAgc2Iud3JpdGVsbigiICBleHBlY3RlZDogJHtleHBlY3RlZC5sZW5ndGh9Iik7CgogICAgaWYgKGlzTWlzc2luZ0tleXMpIHsKICAgICAgc2Iud3JpdGVsbigiICBtaXNzaW5nOiAke21pc3NpbmdLZXlzLmxlbmd0aH0iKTsKICAgICAgc2Iud3JpdGVsbktleXMobWlzc2luZ0tleXMpOwogICAgfQoKICAgIGlmIChoYXNPdmVyUmVwb3J0ZWQpIHsKICAgICAgc2Iud3JpdGVsbigiICBleHRyYTogJHtvdmVyUmVwb3J0ZWQubGVuZ3RofSIpOwogICAgICBzYi53cml0ZWxuS2V5cyhvdmVyUmVwb3J0ZWQpOwogICAgfQoKICAgIGlmIChpc01pc3NpbmdLZXlzKSB7CiAgICAgIF9sb2cudyhzYi50b1N0cmluZygpLnRyaW0oKSk7CiAgICB9IGVsc2UgewogICAgICBfbG9nLmQoc2IudG9TdHJpbmcoKS50cmltKCkpOwogICAgfQogIH0KfQoKZXh0ZW5zaW9uIF9TdHJpbmdCdWZmZXJFeHQgb24gU3RyaW5nQnVmZmVyIHsKICB3cml0ZWxuS2V5cyhJdGVyYWJsZTxTdHJpbmdLZXk+IGtleXMpIHsKICAgIGZvciAoZmluYWwga2V5IGluIGtleXMpIHsKICAgICAgd3JpdGVsbigiICAgIC0gJHtrZXkua2V5fSIpOwogICAgfQogIH0KfQo=';
  static String get assets_string_story_screen_mustache =>
      _decode(_assets_string_story_screen_mustache);
  static const String _assets_strings_extension_mustache =
      'aW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvd2lkZ2V0cy5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOnt7cGFja2FnZU5hbWV9fS97e3tpMThufX19L3N0cmluZ3MuZy5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOnN5bmNocm9uaXplZC9zeW5jaHJvbml6ZWQuZGFydCc7CmltcG9ydCAncGFja2FnZTppbnRsL2RhdGVfc3ltYm9sX2RhdGFfbG9jYWwuZGFydCc7CmltcG9ydCAncGFja2FnZTpjb2xsZWN0aW9uL2NvbGxlY3Rpb24uZGFydCc7Cgp0eXBlZGVmIFMgPSBUcmFuc2xhdGlvbnM7CgpleHRlbnNpb24gU3RyaW5nc0V4dGVuc2lvbiBvbiBCdWlsZENvbnRleHQgewogIFMgZ2V0IHN0cmluZ3MgPT4gTG9jYWxpemF0aW9ucy5vZjxUcmFuc2xhdGlvbnM+KHRoaXMsIFRyYW5zbGF0aW9ucykhOwp9CgpjbGFzcyBTbGFuZ0RlbGVnYXRlIGV4dGVuZHMgTG9jYWxpemF0aW9uc0RlbGVnYXRlPFRyYW5zbGF0aW9ucz4gewogIFNsYW5nRGVsZWdhdGUoe3RoaXMub3ZlcnJpZGVUcmFuc2xhdGlvbn0pOwoKICBzdGF0aWMgZmluYWwgZGVsZWdhdGUgPSBTbGFuZ0RlbGVnYXRlKCk7CgogIGZpbmFsIF9sb2FkZWRUcmFuc2xhdGlvbnMgPSA8TG9jYWxlLCBUcmFuc2xhdGlvbnM+e307CiAgZmluYWwgX2xvYWRMb2NrID0gTG9jaygpOwogIHZhciBfaW5pdGlhbGl6ZURhdGVGb3JtYXR0aW5nQ2FsbGVkQXRMZWFzdE9uY2UgPSBmYWxzZTsKICBmaW5hbCBUcmFuc2xhdGlvbnM/IG92ZXJyaWRlVHJhbnNsYXRpb247CgogIEBvdmVycmlkZQogIEZ1dHVyZTxUcmFuc2xhdGlvbnM+IGxvYWQoTG9jYWxlIGxvY2FsZSkgYXN5bmMgewogICAgaWYgKG92ZXJyaWRlVHJhbnNsYXRpb24gIT0gbnVsbCkgewogICAgICByZXR1cm4gb3ZlcnJpZGVUcmFuc2xhdGlvbiE7CiAgICB9CgogICAgaWYgKF9sb2FkZWRUcmFuc2xhdGlvbnNbbG9jYWxlXSBjYXNlIGZpbmFsIFRyYW5zbGF0aW9ucyB2YWx1ZSkgewogICAgICByZXR1cm4gdmFsdWU7CiAgICB9IGVsc2UgewogICAgICByZXR1cm4gX2xvYWRMb2NrLnN5bmNocm9uaXplZCgoKSBhc3luYyB7CiAgICAgICAgaWYgKCFfaW5pdGlhbGl6ZURhdGVGb3JtYXR0aW5nQ2FsbGVkQXRMZWFzdE9uY2UpIHsKICAgICAgICAgIGF3YWl0IGluaXRpYWxpemVEYXRlRm9ybWF0dGluZygpOwogICAgICAgICAgX2luaXRpYWxpemVEYXRlRm9ybWF0dGluZ0NhbGxlZEF0TGVhc3RPbmNlID0gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgaWYgKF9sb2FkZWRUcmFuc2xhdGlvbnNbbG9jYWxlXSAhPSBudWxsKSB7CiAgICAgICAgICByZXR1cm4gX2xvYWRlZFRyYW5zbGF0aW9uc1tsb2NhbGVdITsKICAgICAgICB9CgogICAgICAgIGZpbmFsIHRyYW5zbGF0aW9ucyA9IGF3YWl0IGxvY2FsZS5hc0FwcExvY2FsZSgpLmJ1aWxkKCk7CiAgICAgICAgX2xvYWRlZFRyYW5zbGF0aW9uc1tsb2NhbGVdID0gdHJhbnNsYXRpb25zOwogICAgICAgIHJldHVybiB0cmFuc2xhdGlvbnM7CiAgICAgIH0pOwogICAgfQogIH0KCiAgc3RhdGljIFRyYW5zbGF0aW9ucyBsb2FkU3luYyhMb2NhbGUgbG9jYWxlKSB7CiAgICByZXR1cm4gZGVsZWdhdGUuX2xvYWRlZFRyYW5zbGF0aW9uc1tsb2NhbGVdITsKICB9CgogIHN0YXRpYyBmaW5hbCBMaXN0PFN0cmluZz4gX3N1cHBvcnRlZExhbmd1YWdlQ29kZXMgPQogICAgICBBcHBMb2NhbGVVdGlscy5zdXBwb3J0ZWRMb2NhbGVzLm1hcCgoaXQpID0+IGl0Lmxhbmd1YWdlQ29kZSkudG9MaXN0KCk7CgogIEBvdmVycmlkZQogIGJvb2wgaXNTdXBwb3J0ZWQoTG9jYWxlIGxvY2FsZSkgPT4KICAgICAgX3N1cHBvcnRlZExhbmd1YWdlQ29kZXMuY29udGFpbnMobG9jYWxlLmxhbmd1YWdlQ29kZSk7CgogIEBvdmVycmlkZQogIGJvb2wgc2hvdWxkUmVsb2FkKFNsYW5nRGVsZWdhdGUgb2xkKSA9PiBvbGQgIT0gdGhpczsKfQoKZXh0ZW5zaW9uIEFwcExvY2FsZUV4dCBvbiBMb2NhbGUgewogIEFwcExvY2FsZSBhc0FwcExvY2FsZSgpIHsKICAgIGZpbmFsIGxvY2FsZSA9IHRoaXM7CiAgICBmaW5hbCBhcHBMb2NhbGUgPSBBcHBMb2NhbGUudmFsdWVzLmZpcnN0V2hlcmVPck51bGwoKGl0KSA9PgogICAgICAgICAgICBpdC5sYW5ndWFnZUNvZGUgPT0gbG9jYWxlLmxhbmd1YWdlQ29kZSAmJgogICAgICAgICAgICBpdC5jb3VudHJ5Q29kZSA9PSBsb2NhbGUuY291bnRyeUNvZGUgJiYKICAgICAgICAgICAgaXQuc2NyaXB0Q29kZSA9PSBsb2NhbGUuc2NyaXB0Q29kZSkgPz8KICAgICAgICBBcHBMb2NhbGUudmFsdWVzLmZpcnN0V2hlcmVPck51bGwoKGl0KSA9PgogICAgICAgICAgICBpdC5sYW5ndWFnZUNvZGUgPT0gbG9jYWxlLmxhbmd1YWdlQ29kZSAmJgogICAgICAgICAgICBpdC5jb3VudHJ5Q29kZSA9PSBsb2NhbGUuY291bnRyeUNvZGUpID8/CiAgICAgICAgQXBwTG9jYWxlLnZhbHVlcwogICAgICAgICAgICAuZmlyc3RXaGVyZU9yTnVsbCgoaXQpID0+IGl0Lmxhbmd1YWdlQ29kZSA9PSBsb2NhbGUubGFuZ3VhZ2VDb2RlKTsKICAgIGlmIChhcHBMb2NhbGUgPT0gbnVsbCkgewogICAgICB0aHJvdyBTdGF0ZUVycm9yKCJEaWRuJ3QgZmluZCBBcHBMb2NhbGUgZm9yIExvY2FsZSgkbG9jYWxlKSIpOwogICAgfQogICAgcmV0dXJuIGFwcExvY2FsZTsKICB9Cn0K';
  static String get assets_strings_extension_mustache =>
      _decode(_assets_strings_extension_mustache);
  static const String _assets_translation_scope_mustache =
      'Ly8gaWdub3JlX2Zvcl9maWxlOiBkZXBlbmRfb25fcmVmZXJlbmNlZF9wYWNrYWdlcwoKaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvbWF0ZXJpYWwuZGFydCc7CmltcG9ydCAncGFja2FnZTpmbHV0dGVyX2hvb2tzL2ZsdXR0ZXJfaG9va3MuZGFydCc7CmltcG9ydCAncGFja2FnZTp7e3BhY2thZ2VOYW1lfX0ve3t7aTE4bn19fS9zdHJpbmdzLmcuZGFydCc7CmltcG9ydCAncGFja2FnZTp7e3BhY2thZ2VOYW1lfX0ve3t7c3RyaW5nU3Rvcnl9fX0vc3RyaW5nX3N0b3J5LmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6c2xhbmcvZ2VuZXJhdGVkLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6cHJvdmlkZXIvcHJvdmlkZXIuZGFydCc7CgpjbGFzcyBUcmFuc2xhdGlvblNjb3BlS2V5cyB7CiAgVHJhbnNsYXRpb25TY29wZUtleXMoe3RoaXMub25BZGR9KTsKCiAgZmluYWwgdm9pZCBGdW5jdGlvbihTdHJpbmcpPyBvbkFkZDsKICBmaW5hbCBfcGF0aHMgPSA8U3RyaW5nPnt9OwoKICB2b2lkIGFkZChTdHJpbmcga2V5KSB7CiAgICBfcGF0aHMuYWRkKGtleSk7CiAgICBvbkFkZD8uY2FsbChrZXkpOwogIH0KCiAgU2V0PFN0cmluZz4gZ2V0IHZhbHVlID0+IFNldDxTdHJpbmc+Lm9mKF9wYXRocyk7CgogIHN0YXRpYyBUcmFuc2xhdGlvblNjb3BlS2V5cz8gb2YoQnVpbGRDb250ZXh0IGNvbnRleHQpID0+CiAgICAgIGNvbnRleHQucmVhZDxUcmFuc2xhdGlvblNjb3BlS2V5cz8+KCk7Cn0KCmNsYXNzIFRyYW5zbGF0aW9uU2NvcGUgZXh0ZW5kcyBIb29rV2lkZ2V0IHsKICBjb25zdCBUcmFuc2xhdGlvblNjb3BlKHsKICAgIHN1cGVyLmtleSwKICAgIHRoaXMuaXNFbmFibGVkID0gdHJ1ZSwKICAgIHJlcXVpcmVkIHRoaXMuY2hpbGQsCiAgICB0aGlzLnNjb3BlS2V5cywKICAgIHRoaXMuZGVidWdMYWJlbCwKICB9KTsKCiAgZmluYWwgYm9vbCBpc0VuYWJsZWQ7CiAgZmluYWwgV2lkZ2V0IGNoaWxkOwogIGZpbmFsIFRyYW5zbGF0aW9uU2NvcGVLZXlzPyBzY29wZUtleXM7CiAgZmluYWwgU3RyaW5nPyBkZWJ1Z0xhYmVsOwoKICBAb3ZlcnJpZGUKICBXaWRnZXQgYnVpbGQoQnVpbGRDb250ZXh0IGNvbnRleHQpIHsKICAgIGlmICghaXNFbmFibGVkKSB7CiAgICAgIHJldHVybiBjaGlsZDsKICAgIH0KCiAgICBmaW5hbCB0cmFuc2xhdGlvbnMgPSBjb250ZXh0LnN0cmluZ3M7CiAgICBmaW5hbCBtZXRhID0gdHJhbnNsYXRpb25zLiRtZXRhOwogICAgZmluYWwgZWZmZWN0aXZlU2NvcGVLZXlzID0gc2NvcGVLZXlzID8/IFRyYW5zbGF0aW9uU2NvcGVLZXlzKCk7CgogICAgZmluYWwgbWV0YVNweSA9IFNweVRyYW5zbGF0aW9uTWV0YWRhdGEoCiAgICAgIGRlYnVnTGFiZWw6IGRlYnVnTGFiZWwsCiAgICAgIGxvY2FsZTogbWV0YS5sb2NhbGUsCiAgICAgIG92ZXJyaWRlczogbWV0YS5vdmVycmlkZXMsCiAgICAgIGNhcmRpbmFsUmVzb2x2ZXI6IG1ldGEuY2FyZGluYWxSZXNvbHZlciwKICAgICAgb3JkaW5hbFJlc29sdmVyOiBtZXRhLm9yZGluYWxSZXNvbHZlciwKICAgICAgb25QYXRoQWNjZXNzZWQ6IChwYXRoKSB7CiAgICAgICAgZWZmZWN0aXZlU2NvcGVLZXlzLmFkZChwYXRoKTsKICAgICAgfSwKICAgICk7CgogICAgcmV0dXJuIExvY2FsaXphdGlvbnMub3ZlcnJpZGUoCiAgICAgIGNvbnRleHQ6IGNvbnRleHQsCiAgICAgIGRlbGVnYXRlczogWwogICAgICAgIFNsYW5nRGVsZWdhdGUoCiAgICAgICAgICBvdmVycmlkZVRyYW5zbGF0aW9uOiB0cmFuc2xhdGlvbnMuJGNvcHlXaXRoKG1ldGE6IG1ldGFTcHkpLAogICAgICAgICkKICAgICAgXSwKICAgICAgY2hpbGQ6IFByb3ZpZGVyLnZhbHVlKAogICAgICAgIHZhbHVlOiBlZmZlY3RpdmVTY29wZUtleXMsCiAgICAgICAgY2hpbGQ6IGNoaWxkLAogICAgICApLAogICAgKTsKICB9Cn0KCmNsYXNzIFNweVRyYW5zbGF0aW9uTWV0YWRhdGEKICAgIGV4dGVuZHMgVHJhbnNsYXRpb25NZXRhZGF0YTxBcHBMb2NhbGUsIFRyYW5zbGF0aW9ucz4gewogIFNweVRyYW5zbGF0aW9uTWV0YWRhdGEoewogICAgdGhpcy5kZWJ1Z0xhYmVsLAogICAgcmVxdWlyZWQgc3VwZXIubG9jYWxlLAogICAgcmVxdWlyZWQgc3VwZXIub3ZlcnJpZGVzLAogICAgcmVxdWlyZWQgc3VwZXIuY2FyZGluYWxSZXNvbHZlciwKICAgIHJlcXVpcmVkIHN1cGVyLm9yZGluYWxSZXNvbHZlciwKICAgIHJlcXVpcmVkIHRoaXMub25QYXRoQWNjZXNzZWQsCiAgfSk7CgogIGZpbmFsIFN0cmluZz8gZGVidWdMYWJlbDsKICBmaW5hbCB2b2lkIEZ1bmN0aW9uKFN0cmluZykgb25QYXRoQWNjZXNzZWQ7CgogIEBvdmVycmlkZQogIE5vZGU/IGdldE92ZXJyaWRlKFN0cmluZyBwYXRoKSB7CiAgICBvblBhdGhBY2Nlc3NlZChwYXRoKTsKICAgIHJldHVybiBzdXBlci5nZXRPdmVycmlkZShwYXRoKTsKICB9Cn0K';
  static String get assets_translation_scope_mustache =>
      _decode(_assets_translation_scope_mustache);
  static const String _assets_slang_base_state_ext_mustache =
      'aW1wb3J0ICdwYWNrYWdlOnt7cGFja2FnZU5hbWV9fS97e3tpMThufX19L3N0cmluZ3MuZy5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOnt7cGFja2FnZU5hbWV9fS97e3tzdHJpbmdTdG9yeX19fS9zdHJpbmdfc3RvcnkuZGFydCc7CmltcG9ydCAncGFja2FnZTpzdHJpbmdfc3Rvcnkvc3RyaW5nX3N0b3J5LmRhcnQnCiAgICBzaG93IFNsYW5nQmFzZVN0YXRlLCBTbGFuZ0Jhc2VTdGF0ZUlkbGUsIFNsYW5nQmFzZVN0YXRlRGF0YTsKCmV4dGVuc2lvbiBTbGFuZ0Jhc2VTdGF0ZUV4dCBvbiBTbGFuZ0Jhc2VTdGF0ZSB7CiAgU2xhbmdEZWxlZ2F0ZSBhc1NsYW5nRGVsZWdhdGUoKSB7CiAgICBmaW5hbCBzdGF0ZSA9IHRoaXM7CgogICAgcmV0dXJuIHN3aXRjaCAoc3RhdGUpIHsKICAgICAgU2xhbmdCYXNlU3RhdGVJZGxlKCkgPT4gU2xhbmdEZWxlZ2F0ZS5kZWxlZ2F0ZSwKICAgICAgU2xhbmdCYXNlU3RhdGVEYXRhKCkgPT4gU2xhbmdEZWxlZ2F0ZSgKICAgICAgICAgIG92ZXJyaWRlVHJhbnNsYXRpb246IEFwcExvY2FsZVV0aWxzLmJ1aWxkV2l0aE92ZXJyaWRlc0Zyb21NYXBTeW5jKAogICAgICAgICAgICBsb2NhbGU6IF9mcm9tTGFuZ3VhZ2VDb2RlKHN0YXRlLmxhbmd1YWdlQ29kZSksCiAgICAgICAgICAgIGlzRmxhdE1hcDogZmFsc2UsCiAgICAgICAgICAgIG1hcDogc3RhdGUuc2xhbmdKc29uLAogICAgICAgICAgKSwKICAgICAgICApLAogICAgfTsKICB9Cn0KCkFwcExvY2FsZSBfZnJvbUxhbmd1YWdlQ29kZShTdHJpbmcgY29kZSkgPT4KICAgIEFwcExvY2FsZS52YWx1ZXMuZmlyc3RXaGVyZSgoaXQpID0+IGl0Lmxhbmd1YWdlQ29kZSA9PSBjb2RlKTsK';
  static String get assets_slang_base_state_ext_mustache =>
      _decode(_assets_slang_base_state_ext_mustache);
  static const String _assets_string_story_generated_delegate_impl_mustache =
      'aW1wb3J0ICdkYXJ0OnVpJzsKCmltcG9ydCAncGFja2FnZTp7e3BhY2thZ2VOYW1lfX0ve3t7c3RyaW5nU3Rvcnl9fX0vc3RyaW5nX3N0b3J5LmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6c3RyaW5nX3N0b3J5L3N0cmluZ19zdG9yeS5kYXJ0JzsKCmNsYXNzIFN0cmluZ1N0b3J5R2VuZXJhdGVkRGVsZWdhdGVJbXBsIGV4dGVuZHMgU3RyaW5nU3RvcnlHZW5lcmF0ZWREZWxlZ2F0ZSB7CiAgQG92ZXJyaWRlCiAgRnV0dXJlPHZvaWQ+IHByZWxvYWQoTG9jYWxlIGxvY2FsZSkgYXN5bmMgewogICAgYXdhaXQgU2xhbmdEZWxlZ2F0ZS5kZWxlZ2F0ZS5sb2FkKGxvY2FsZSk7CiAgfQoKICBAb3ZlcnJpZGUKICB2b2lkIHZhbGlkYXRlU3RhdGVEYXRhKFNsYW5nQmFzZVN0YXRlRGF0YSBzdGF0ZSkgewogICAgc3RhdGUuYXNTbGFuZ0RlbGVnYXRlKCk7CiAgfQoKICBAb3ZlcnJpZGUKICBMaXN0PFN0cmluZz4gZ2V0IHBlcm1pdHRlZEtleXMgPT4KICAgICAgU3RyaW5nS2V5LnZhbHVlcy5tYXAoKGl0KSA9PiBpdC5rZXkpLnRvTGlzdCgpOwoKICBAb3ZlcnJpZGUKICBpbnQgZ2V0IHZlcnNpb25Db2RlID0+IHt7dmVyc2lvbkNvZGV9fTsKCiAgQG92ZXJyaWRlCiAgU3RyaW5nIGdldCBqc29uQXNzZXRzUGF0aCA9PiAie3t7anNvbkFzc2V0c1BhdGh9fX0iOwoKICBAb3ZlcnJpZGUKICBTdHJpbmcgZ2V0IGJhc2VMb2NhbGUgPT4gInt7YmFzZUxvY2FsZX19IjsKfQo=';
  static String get assets_string_story_generated_delegate_impl_mustache =>
      _decode(_assets_string_story_generated_delegate_impl_mustache);
  static const String _assets_locale_editor_widget_mustache =
      '';
  static String get assets_locale_editor_widget_mustache =>
      _decode(_assets_locale_editor_widget_mustache);
  static const String _assets_locale_editor_sheet_mustache =
      'Ly8gaWdub3JlX2Zvcl9maWxlOiBkZXBlbmRfb25fcmVmZXJlbmNlZF9wYWNrYWdlcwoKaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvbWF0ZXJpYWwuZGFydCc7CmltcG9ydCAncGFja2FnZTpmbHV0dGVyX2Jsb2MvZmx1dHRlcl9ibG9jLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6e3twYWNrYWdlTmFtZX19L3t7e3N0cmluZ1N0b3J5fX19L3N0cmluZ19zdG9yeS5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOnN0cmluZ19zdG9yeS9zdHJpbmdfc3RvcnkuZGFydCc7CmltcG9ydCAncGFja2FnZTp3b2x0X21vZGFsX3NoZWV0L3dvbHRfbW9kYWxfc2hlZXQuZGFydCc7CgpjbGFzcyBMb2NhbGVFZGl0b3JTaGVldCB7CiAgTG9jYWxlRWRpdG9yU2hlZXQuXygpOwoKICBzdGF0aWMgRnV0dXJlPHZvaWQ+IHNob3coQnVpbGRDb250ZXh0IGNvbnRleHQpIGFzeW5jIHsKICAgIGZpbmFsIGtleXNUb0Rpc3BsYXkgPSBUcmFuc2xhdGlvblNjb3BlS2V5cy5vZihjb250ZXh0KT8udmFsdWU7CiAgICBpZiAoa2V5c1RvRGlzcGxheSA9PSBudWxsKSB7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICBXb2x0TW9kYWxTaGVldC5zaG93KAogICAgICAgIGNvbnRleHQ6IGNvbnRleHQsCiAgICAgICAgcGFnZUxpc3RCdWlsZGVyOiAoXykgPT4gW19zaGVldCgpXSwKICAgICAgICBtb2RhbERlY29yYXRvcjogKGNoaWxkKSB7CiAgICAgICAgICByZXR1cm4gQmxvY1Byb3ZpZGVyKAogICAgICAgICAgICBjcmVhdGU6IChjb250ZXh0KSB7CiAgICAgICAgICAgICAgcmV0dXJuIFNsYW5nRWRpdG9yQ3ViaXQoCiAgICAgICAgICAgICAgICBiYXNlQ3ViaXQ6IGNvbnRleHQucmVhZDxTbGFuZ0Jhc2VDdWJpdD4oKSwKICAgICAgICAgICAgICAgIHNjb3BlZEtleXM6IGtleXNUb0Rpc3BsYXksCiAgICAgICAgICAgICAgICBvdkxvY2FsZToKICAgICAgICAgICAgICAgICAgICBTdHJpbmdTdG9yeVNlcnZpY2UuaW5zdGFuY2UuY29uZmlnLmFwcExhbmd1YWdlQ29kZSwKICAgICAgICAgICAgICApOwogICAgICAgICAgICB9LAogICAgICAgICAgICBjaGlsZDogY2hpbGQsCiAgICAgICAgICApOwogICAgICAgIH0pOwogIH0KCiAgc3RhdGljIE5vblNjcm9sbGluZ1dvbHRNb2RhbFNoZWV0UGFnZSBfc2hlZXQoKSB7CiAgICByZXR1cm4gTm9uU2Nyb2xsaW5nV29sdE1vZGFsU2hlZXRQYWdlKAogICAgICBjaGlsZDogUGFkZGluZygKICAgICAgICBwYWRkaW5nOiBjb25zdCBFZGdlSW5zZXRzLm9ubHkodG9wOiBEaW1lbnNpb25zRG91YmxlLm0pLAogICAgICAgIGNoaWxkOiBMb2NhbGVFZGl0b3JXaWRnZXQoCiAgICAgICAgICBzaG93U2NvcGVkVmFsdWVzOiB0cnVlLAogICAgICAgICAgaXNTZWFyY2hBdmFpbGFibGU6IGZhbHNlLAogICAgICAgICAgb25Kc29uUGF0aFNlbGVjdGVkOiAoXykge30sCiAgICAgICAgKSwKICAgICAgKSwKICAgICk7CiAgfQp9Cg==';
  static String get assets_locale_editor_sheet_mustache =>
      _decode(_assets_locale_editor_sheet_mustache);
  static const String _assets_locale_submit_sheet_mustache =
      '';
  static String get assets_locale_submit_sheet_mustache =>
      _decode(_assets_locale_submit_sheet_mustache);
  static const String _assets_generate_translations_prompt_mustache =
      'VHJhbnNsYXRlIHRoZSB0ZXh0IHNwZWNpZmllZCBhZnRlciAnLS0tJyBmcm9tIHRoZSB7e2Zyb219fSBsYW5ndWFnZSB0byB0aGUge3t0b319IGxhbmd1YWdlLgoKS2VlcCB0aGUgb3JpZ2luYWwgZm9ybWF0aW5nIChpbmNsdWRpbmcgbmV3bGluZXMpLCByZXR1cm4gdGhlIHRyYW5zbGF0ZWQgdGV4dCBvbmx5LgoKLS0tCnt7dGV4dH19';
  static String get assets_generate_translations_prompt_mustache =>
      _decode(_assets_generate_translations_prompt_mustache);
}

String _decode(String base64String) => utf8.decode(base64Decode(base64String));
